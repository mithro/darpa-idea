defpackage jitpcb/dlopen :
  import core
  import collections

;============================================================
;=================== Externs ================================
;============================================================
extern dlopen : (ptr<byte>, int) -> ptr<?>
extern dlerror : () -> ptr<byte>
extern dlsym : (ptr<?>, ptr<byte>) -> ptr<?>
extern dlclose : (ptr<?>) -> int

;============================================================
;================== LoStanza Objects ========================
;============================================================

public lostanza deftype DynamicLibrary :
  name: ref<String>
  value: ptr<?>

public lostanza deftype DynamicSymbol :
  lib: ref<DynamicLibrary>
  value: ptr<?>

public lostanza defn name (dl:ref<DynamicLibrary>) -> ref<String> :
  return dl.name

public lostanza defn free (dl:ref<DynamicLibrary>) -> ref<False> :
  val ret = call-c dlclose(dl.value)
  if ret != 0 : throw-dl-error()
  return false  

;============================================================
;====================== Wrappers ============================
;============================================================

public lostanza defn dl-open (filename:ref<String>) -> ref<DynamicLibrary> :
  #if-defined(PLATFORM-OS-X) :
    val RTLD_NOW = 0x2
    val dlflags = RTLD_NOW
  #else :
    #if-defined(PLATFORM-LINUX) :
      val RTLD_NOW = 0x2
      val RTLD_DEEPBIND = 0x8
      val dlflags = RTLD_NOW | RTLD_DEEPBIND
    #else :
      val dlflags = 0
      fatal("dl-open not supported on this platform.")
  val ptr = call-c dlopen(addr!(filename.chars), dlflags)
  val null = 0L as ptr<?>
  if ptr == null : throw-dl-error()

  return new DynamicLibrary{filename, ptr}

public lostanza defn dl-sym (dl:ref<DynamicLibrary>, name:ref<String>) -> ref<DynamicSymbol> :
  val ptr = call-c dlsym(dl.value, addr!(name.chars))
  val null = 0L as ptr<?>
  if ptr == null : throw(SymbolLoadError(dl, name))
  return new DynamicSymbol{dl, ptr}

;============================================================
;==================== Errors ================================
;============================================================

lostanza defn throw-dl-error () -> ref<Void> :
  return throw(DLError(String(call-c dlerror())))

public defstruct DLError <: Exception: (msg:String)
public defmethod print (o:OutputStream, e:DLError) :
  print(o, msg(e))

defn SymbolLoadError (dl:DynamicLibrary, sym-name:String) :
  DLError(to-string("Error loading symbol %~ from dynamic library %~." % [sym-name, name(dl)]))

