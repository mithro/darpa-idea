defpackage plugins/slave :
  import core
  import collections
  import serialize
  import rtm/errors
  import plugins
  import jitpcb/config

;============================================================
;================= User Interface ===========================
;============================================================

var PLUGIN-NAME:Symbol
val PLUGIN-ENTRY-POINTS = HashTable<Symbol,(? -> ?)>()
public defn add-plugin-entry-point (plugin:Symbol, name:Symbol, f: ? -> ?) :
  PLUGIN-NAME = plugin
  PLUGIN-ENTRY-POINTS[name] = f

;============================================================
;=================== Initialization =========================
;============================================================

;Plugin initialization point
extern defn plugin_initialization (data:ptr<ByteInputStream>) -> int :
  plugin-initialization(to-ref(data))
  return 0

defn plugin-initialization (input-stream:ByteInputStream) :
  val init:PluginInit = deserialize(input-stream)
  if version(init) != jitpcb-version() :
    fatal("Plugin version mismatch. JitPCB core is at version %_, but %_ plugin is at version %_." % [
      string-join(version(init), "."), PLUGIN-NAME, string-join(jitpcb-version(), ".")])
  srand(seed(init))
  set-current-output-stream(output-stream(init))
  report-error(errors(init))

;============================================================
;==================== Entry Point ===========================
;============================================================

;Plugin entry point
extern defn plugin_main (data:ptr<ByteInputStream>) -> ptr<ByteInputStream> :
  return to-ptr(call-plugin(to-ref(data)))

;Call plugin with ByteInputStream representing input argument.
;Returns ByteInputStream representing output argument.
defn call-plugin (input-stream:ByteInputStream) :
  to-ByteInputStream $
    try :
      val entry = deserialize(input-stream)
      val arg = deserialize(input-stream)
      val entry-point = PLUGIN-ENTRY-POINTS[entry]
      val result = entry-point(arg)
      val seed = state(current-random())
      PluginResult(result, seed, error-report())
    catch (e:Exception) :
      e
  