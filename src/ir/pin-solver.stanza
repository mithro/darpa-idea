defpackage rtm/pin-solver :
  import core
  import collections
  import rtm/ir
  import rtm/ir/errors
  import rtm/ir-utils
  import rtm/utils
  import rtm/errors
  import pin-state
  import rtm/ir-lower

;============================================================
;====================== Driver ==============================
;============================================================

public defn assign-satisfying-pins (prog:Collection<TStmt>) -> Collection<TStmt> :
  within (ir-table, m) = map-top-modules(prog) :
    ;Construct input to solver
    val input = construct-input(ir-table, m)

    ;Solve for pinmapping
    val pinmap = solve(ir-table, m, input)

    ;Apply the result
    apply(pinmap, m)

public defn solve-requirements (prog:Collection<TStmt>) -> [Collection<TStmt>, PinMapping] :
  ;Get IRTable
  val ir-table = IRTable(prog)
  val top-ms = to-tuple(top-modules(ir-table))
  switch(length(top-ms)) :
    0 : throw(NoTopLevel())
    1 : false
    else : throw(MultipleTopLevel())

  ;Compute pin mapping
  val m = module(ir-table, top-ms[0])
  val input = construct-input(ir-table, m)
  val pinmap = solve(ir-table, m, input)

  ;Return prog and pin-mapping
  [prog, pinmap]

;============================================================
;============================================================
;============================================================

defn add-supported-by-stmts (m:DefModule, new-stmts:Seqable<SupportedByStmt>) :
  val old-stmts = filter({_ is-not SupportedByStmt}, stmts(m))
  val stmts* = to-list(cat(old-stmts, new-stmts))
  sub-stmts(m, stmts*)

;============================================================
;================= Solver ===================================
;============================================================

defn solve (ir-table:IRTable, m:DefModule, input:PinSolverInput) -> PinMapping :
  val ps = PinState(length(pins(input)), classes(input))
  defn compute-solns () -> Seq<Tuple<Soln>> :
    val solns = solve-requests(ps, classes(input), reqs(input), preassigned(input))
    throw(UnsatisfiableRequirements(name(m))) when empty?(solns)
    solns
  val pad-table = PadTable(ir-table, m)
  val net-graph = DynamicNetGraph(ir-table, m)
  PinMapping(input, ps, pad-table, net-graph, cat-all(repeatedly(compute-solns)))  

;============================================================
;=================== Pin Mapping ============================
;============================================================

public deftype PinMapping
public defmulti current-mapping (p:PinMapping) -> Mapping
public defmulti current-nets (p:PinMapping) -> Tuple<NetStmt>
public defmulti current-pad-nets (p:PinMapping) -> Tuple<PadNet>
public defmulti next (p:PinMapping) -> False
public defmulti apply (p:PinMapping, m:DefModule) -> DefModule

public defstruct PadNet :
  name: False|Symbol
  pads: Tuple<Ref>
with:
  printer => true

defn PinMapping (input:PinSolverInput,
                 ps:PinState,
                 pad-table:PadTable,
                 net-graph:DynamicNetGraph,
                 solns:Seq<Tuple<Soln>>) :
  defn to-pad-net (n:NetStmt) :
    PadNet(name(n), to-tuple(seq-cat(pads{pad-table, _}, refs(n))))

  ;Compute current nets  
  var current-mapping:Mapping
  var current-nets:Tuple<NetStmt>
  var current-pad-nets:Tuple<PadNet>
  defn update-current (soln:Tuple<Soln>) :
    current-mapping = to-pin-mapping(ps, soln, input)
    current-nets = nets(net-graph, current-mapping)
    current-pad-nets = map(to-pad-net, current-nets)
  update-current(peek(solns))

  ;Return PinMapping datastructure
  new PinMapping :
    defmethod current-mapping (this) : current-mapping
    defmethod current-nets (this) : current-nets
    defmethod current-pad-nets (this) : current-pad-nets
    defmethod next (this) :
      next(solns)
      update-current(peek(solns))
    defmethod apply (this, m:DefModule) :
      add-supported-by-stmts(m, to-supported-by-stmts(peek(solns), input))

;============================================================
;===================== Pad Table ============================
;============================================================

deftype PadTable
defmulti pads (t:PadTable, pin:Ref) -> List<Ref>

defn PadTable (ir-table:IRTable, m:DefModule) :
  val table = HashTable<Ref,List<Ref>>(List())
  defn add-pad (pin:Ref, pad:Ref) : update(table, cons{pad, _}, pin)
  val mtable = mtable(ir-table, name(m))
  for stmt in packages(mtable) do :
    match(package(stmt)) :
      ([pname, pmap]:[Symbol, Mapping]) :
        for [src, dst] in kvs(mappings(pmap)) do :
          add-pad(dot(ref(stmt), src), dot(ref(stmt),dst))
      (f:False) :
        false
  new PadTable :
    defmethod pads (this, pin:Ref) : table[pin]  

;============================================================
;================= Connectivity Graph =======================
;============================================================

deftype DynamicNetGraph
defmulti nets (g:DynamicNetGraph, m:Mapping) -> Tuple<NetStmt>

defn DynamicNetGraph (ir-table:IRTable, m:DefModule) :
  val mtable = mtable(ir-table, name(m))

  ;===== Compute Pin Indices =====
  val pin-indices = HashTable<Ref,Int>()
  val all-pins = Vector<Ref>()
  val component-pins = HashSet<Ref>()
  defn record-pin (r:Ref) :
    pin-indices[r] = length(all-pins)
    add(all-pins, r)
  for inst in insts(mtable) do :
    val inst-ref = Ref(name(inst))
    for p in pins(ctable(ir-table, component(inst))) do :
      for pin-ref in expand(ir-table, dot(inst-ref, Ref(name(p))), type(p)) do :
        record-pin(pin-ref)
        add(component-pins, pin-ref)
  for node in nodes(mtable) do :
    do(record-pin, expand(ir-table, Ref(name(node)), type(node)))
  for require in requires(mtable) do :
    val rname = name(require)
    match(rname:Symbol) :
      val inst-ref = dot(inst(require), Ref(rname))
      val cap-name = name(base(capability(require)))
      val ctype = type(capability(ir-table, cap-name)) as PinType      
      for cref in expand(inst-ref, capability(require)) do :
        do(record-pin, expand(ir-table, cref, ctype))

  ;===== Compute Nets =====
  val nets = to-tuple(nets(mtable))

  ;===== Compute New Nets =====
  val mapping-table = HashTable<Ref,Ref>()
  defn load-mapping (m:Mapping) :
    clear(mapping-table)
    for e in mappings(m) do :
      mapping-table[key(e)] = value(e)
  defn assigned? (r:Ref) :
    get?(mapping-table, r, r)
      
  defn new-nets (m:Mapping) :
    load-mapping(m)
    ;Construct UFSets
    val sets = to-tuple $
      for p in all-pins seq :
        val ps = PinSet(p)
        set-ufset(ps, UFSet(ps))
        ps
    ;Union net sets
    for net in nets do :
      for r in refs(net) do :
        val r-id = pin-indices[assigned?(r)]
        val s = sets[r-id]
        add(s, name(net))
      if length(refs(net)) > 1 :
        val r0-id = pin-indices[assigned?(head(refs(net)))]
        for r in tail(refs(net)) do :
          val r-id = pin-indices[assigned?(r)]
          merge!(ufset(sets[r0-id]), ufset(sets[r-id]))
    ;Collect refs
    for s in sets do :
      val root = root-value(ufset(s))
      add(root, ref(s))
      add(root, net-name(s))
    ;Construct new net statements
    to-tuple $ for s in sets seq? :
      val refs* = to-list(filter({component-pins[_]}, refs(s)))
      if length(refs*) > 1 : One(NetStmt(net-name(s), refs*))
      else : None()


  ;===== Return datastructure =====
  new DynamicNetGraph :
    defmethod nets (this, m:Mapping) : new-nets(m)

defstruct PinSet :
  ref:Ref
  ufset:UFSet<PinSet> with: (init => void, setter => set-ufset)
  refs:List<Ref> with: (init => List(), setter => set-refs)
  net-name:Symbol|False with: (init => false, setter => set-net-name)
defn add (ps:PinSet, r:Ref) :
  set-refs(ps, cons(r, refs(ps)))
defn add (ps:PinSet, name:Symbol|False) :
  set-net-name(ps, name) when net-name(ps) is False

;============================================================
;================== Construct Input =========================
;============================================================

public defstruct ReqPort :
<<<<<<< HEAD
  parent-option: Ref|False
  ref:Ref
  port?:True|False
with:
  printer => true
=======
  ref:Ref
  port?:True|False
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa

public defstruct PinSolverInput :
  pins:Tuple<Ref>
  classes:Tuple<Class>
  reqs:Tuple<ClassReq>
  req-ports:Table<Int,ReqPort>
  options:Vector<KeyValue<Ref,Option>>
  preassigned:Tuple<KeyValue<Int,Int>>

<<<<<<< HEAD
defmethod print (o:OutputStream, p:PinSolverInput) :
  val o2 = IndentedStream(o)
  val o3 = IndentedStream(o2)
  defn P (x) : print(o, x)
  defn NP (x) : lnprint(o2, x)
  defn NP2 (x) : lnprint(o3, x)
  P("PinSolverInput:")
  NP("pins:")
  do(NP2, pins(p))
  NP("classes:")
  do(NP2, classes(p))
  NP("reqs:")
  do(NP2, reqs(p))
  NP("req-ports:")
  do(NP2, req-ports(p))
  NP("options:")
  do(NP2, options(p))
  NP("preassigned:")
  do(NP2, preassigned(p))  

=======
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa
public defn construct-input (ir-table:IRTable, m:DefModule) -> PinSolverInput :
  ;Retrieve module table
  val mtable = mtable(ir-table, name(m))
  val menv = ModuleEnv(ir-table, name(m))

  ;List all component ports
  defn cports (component:Symbol) :
    seq(Ref{name(_)}, pins(ctable(ir-table, component)))

  ;Expand all instance ports
  defn instance-ports (inst:Ref, component:Symbol) :
    for p in pins(ctable(ir-table, component)) seq-cat :
      expand(ir-table, dot(inst,Ref(name(p))), type(p))

  ;Expand all capability pins
  defn capability-pins (base:Ref, cname:Symbol) :
    match(type(capability(ir-table, cname))) :
      (t:PinType) : expand(ir-table, base, t)
      (t:False) : List()

  ;List all pins
  val all-pins = Vector<Ref>()
  val pin-index-table = HashTable<Ref,Int>()
  defn record-pin (r:Ref) :
    pin-index-table[r] = length(all-pins)
    add(all-pins, r)
  for inst in insts(mtable) do :
    do(record-pin, instance-ports(Ref(name(inst)), component(inst)))
  for node in nodes(mtable) do :
    do(record-pin, expand(menv, Ref(name(node))))

  ;List all inst supports
  defn all-inst-supports () :
    val component-supports = for inst in insts(mtable) seq-cat :
      for support in supports(ctable(ir-table, component(inst))) seq :
        val options* = for option in options(support) map :
          val mapping* = Mapping $
            for e in mappings(mapping(option)) map :
              key(e) => dot(Ref(name(inst)), value(e))
          sub-mapping(option, mapping*)
        InstSupportsStmt(Ref(name(inst)), capability(support), options*)
    cat(component-supports, inst-supports(mtable))

  ;Compute class index table
  val class-index-table = HashTable<Ref,Int>()
  defn record-class (r:Ref) :
    if not key?(class-index-table, r) :
      class-index-table[r] = length(class-index-table)
  for support in all-inst-supports() do :
    val ref = dot(inst(support), Ref(capability(support)))
    record-class(ref)

  ;Build the requests
  val port-requests = IntTable<ReqPort>()
<<<<<<< HEAD
  defn form-requests (r:RequireStmt, parent-option:Ref|False, src-table:HashTable<Ref,PinSource>|False) -> Seqable<ClassReq> :
=======
  defn form-requests (r:RequireStmt, src-table:HashTable<Ref,PinSource>|False) -> Seqable<ClassReq> :
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa
    val class-ref = dot(inst(r), Ref(name(base(capability(r)))))
    val class-index = class-index-table[class-ref]
    val pinmap = to-hashtable<Ref,Ref>(mappings(mapping(r)))
    match(name(r)) :
      (rname:Symbol) :
        val inst-ref = dot(inst(r), Ref(rname))
        for ref in expand(inst-ref, capability(r)) seq :
          val pins = capability-pins(ref, name(base(capability(r))))
          val srcs = match(src-table) :
            (src-table:HashTable<Ref,PinSource>) :
              for p in pins seq :
                get?(src-table, p, NoInput())
            (src-table:False) :
              map(PinInput, pins)
          val tgts = for p in pins seq :
            match(get?(pinmap, tail(p))) :
              (p:Ref) : pin-index-table[p]
              (p:False) : p
          val req-id = genid()
<<<<<<< HEAD
          port-requests[req-id] = ReqPort(parent-option, ref, true)
=======
          port-requests[req-id] = ReqPort(ref, true)
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa
          ClassReq(req-id, class-index, to-tuple(srcs), to-tuple(tgts))
      (rname:False) :
        val ref = FieldRef(inst(r), name(base(capability(r))))
        for r in expand(ref, capability(r)) seq :
          val req-id = genid()
<<<<<<< HEAD
          port-requests[req-id] = ReqPort(parent-option, r, false)
=======
          port-requests[req-id] = ReqPort(r, false)
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa
          ClassReq(req-id, class-index, [], [])

  ;Create class group
  val class-groups = Array<List<Group>>(length(class-index-table), List())
  val options = Vector<KeyValue<Ref,Option>>()
  for support in all-inst-supports() do :      
    val class-ref = dot(inst(support), Ref(capability(support)))
    val class = class-index-table[class-ref]
    val refs = capability-pins(Ref(capability(support)), capability(support))
    val group = Group $ to-tuple $
      for option in /options(support) seq :
        ;Forwarded
        defn forwarded? (r:Ref) :
          for req in requires(option) any? :
            match(name(req)) :
              (n:Symbol) : base?(dot(inst(req), Ref(n)), r)
              (n:False) : false
        val pinmap = to-hashtable<Ref,Ref>(mappings(mapping(option)))
        val src-table = HashTable<Ref,PinSource>()
        val pins = to-tuple $ for (r in refs, argi in 0 to false) seq :
          val tgt = pinmap[r]
          if forwarded?(tgt) : src-table[tgt] = ArgInput(argi)
          else : pin-index-table[tgt]
<<<<<<< HEAD
        val option-id = dot(inst(support), id(option) as Ref)
        val reqs = to-tuple $ for r in requires(option) seq-cat :
          form-requests(r, option-id, src-table)
        val o = Option(pins, reqs)
=======
        val reqs = to-tuple $ for r in requires(option) seq-cat :
          form-requests(r, src-table)
        val o = Option(pins, reqs)
        val option-id = dot(inst(support), id(option) as Ref)
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa
        add(options, option-id => o)
        o
    class-groups[class] = cons(group, class-groups[class])

  ;Create classes
  val classes = to-tuple $
    for (groups in class-groups, id in 0 to false) seq :
<<<<<<< HEAD
      Class(id, to-tuple(reverse(groups)))
=======
      Class(id, to-tuple(groups))
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa

  ;Create class requests
  val class-reqs = to-tuple $
    for r in requires(mtable) seq-cat :
<<<<<<< HEAD
      form-requests(r, false, false)
=======
      form-requests(r, false)
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa

  ;Create pre-assigned solution
  val pre-assigned = Vector<KeyValue<Int,Int>>()
  val option-index-table = to-hashtable(key{options[_]}, 0 to length(options))
<<<<<<< HEAD
  val request-req-table = to-hashtable<[Ref|False, Ref],Int> $
    for entry in port-requests seq :
      [parent-option(value(entry)), ref(value(entry))] => key(entry)

  for s in supported-bys(mtable) do :
    let loop (s:SupportedByStmt = s, parent-option:Ref|False = false) :
      val req-id = request-req-table[[parent-option, ref(s)]]
      add(pre-assigned, req-id => option-index-table[option-id(s)])
      do(loop{_, option-id(s)}, nested-supports(s))
=======
  val request-req-table = to-hashtable<Ref,Int> $
    for entry in port-requests seq : ref(value(entry)) => key(entry)
  for s in supported-bys(mtable) do :
    let loop (s:SupportedByStmt = s) :
      val req-id = request-req-table[ref(s)]
      add(pre-assigned, req-id => option-index-table[option-id(s)])
      do(loop, nested-supports(s))
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa
      
  ;Return constructed input
  PinSolverInput(to-tuple(all-pins),
                 classes,
                 class-reqs,
                 port-requests,
                 options,
                 to-tuple(pre-assigned))

;============================================================
;=================== Output Conversion ======================
;============================================================

defn to-pin-mapping (ps:PinState, solns:Tuple<Soln>, input:PinSolverInput) -> Mapping :
  Mapping $ to-list $
    for soln in solns seq-cat :
      val srcs = sources(req(soln))
      val option-pins = option-pins(ps, option(soln))
      for (s in srcs, p in option-pins) seq? :
        match(s:PinInput, p:Int) :
          val abstract-pin = data(s) as Ref
          val concrete-pin = pins(input)[p]
          One(abstract-pin => concrete-pin)
        else : None()  
    
defn to-supported-by-stmts (soln:Tuple<Soln>, input:PinSolverInput) -> Tuple<SupportedByStmt> :
  val soln-table = to-inttable(id{req(_)}, soln)
  defn supported-by (r:ClassReq) :
    val soln = soln-table[id(r)]
    val port = req-ports(input)[id(r)]
    val option = options(input)[option(soln)]
    val nested = map(supported-by, /classes(value(option)))
    SupportedByStmt(ref(port), port?(port), key(option), nested)
  map(supported-by, reqs(input))
