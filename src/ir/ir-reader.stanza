defpackage rtm/ir-reader :
  import core
  import collections
  import reader
  import rtm/utils
  import rtm/ir
  import rtm/ir-utils
  import rtm/ir/errors

;============================================================
;===================== Interface ============================
;============================================================

public defn parse-rtm (filename:String) -> List<TStmt> :
  val forms = read-file(filename)
  parse-syntax[rtm-ir / #tstmt! ...](forms)

;============================================================
;==================== Syntax Definition =====================
;============================================================

defsyntax rtm-ir :
  ;===== Utilities =====
  defn ut (x) : unwrap-token(x)

  ;===== Basics =====
  defproduction symbol : Symbol
  defrule symbol = (?x) when ut(x) is Symbol : ut(x)

  defproduction string : String
  defrule string = (?x) when ut(x) is String : ut(x)

  defproduction double : Double
  defrule double = (?x) when ut(x) is Double : ut(x)

  defproduction bool : True|False
  defrule bool = (?x) when ut(x) is True|False : ut(x)

  defproduction int : Int
  defrule int = (?x) when ut(x) is Int : ut(x)

  ;Non-negative predicates
  defn non-neg-int (x) :
    match(ut(x)) :
      (x:Int) : x >= 0
      (x) : false
  defn non-neg-double (x) :
    match(ut(x)) :
      (x:Double) : x >= 0.0
      (x) : false

  defproduction non-neg-int : Int
  defrule non-neg-int = (?x) when non-neg-int(x) : ut(x)

  defproduction non-neg-double : Double
  defrule non-neg-double = (?x) when non-neg-double(x) : ut(x)

  ;===== Errors =====
  defproduction id! : Symbol
  defrule id! = (?x:#id) : x
  fail-if id! = () : RTME(closest-info(), "Identifier expected here.")

  defproduction id$ : Symbol
  fail-if id$ = (#id ?rest) : RTME(closest-info(rest), "Unexpected input here.")
  defrule id$ = (?x:#id!) : x

  defproduction string! : String
  defrule string! = (?x:#string) : x
  fail-if string! = () : RTME(closest-info(), "String expected here.")

  defproduction symbol! : Symbol
  defrule symbol! = (?x:#symbol) : x
  fail-if symbol! = () : RTME(closest-info(), "Symbol expected here.")

  defproduction bool! : True|False
  defrule bool! = (?x:#bool) : x
  fail-if bool! = () : RTME(closest-info(), "Bool expected here.")

  defproduction double! : Double
  defrule double! = (?x:#double) : x
  fail-if double! = () : RTME(closest-info(), "Double expected here.")

  defproduction double$ : Double
  fail-if double$ = (#double ?rest) : RTME(closest-info(rest), "Unexpected input here.")
  defrule double$ = (?x:#double!) : x

  defproduction int! : Int
  defrule int! = (?x:#int) : x
  fail-if int! = () : RTME(closest-info(), "Int expected here.")

  defproduction int$ : Int
  fail-if int$ = (#int ?rest) : RTME(closest-info(rest), "Unexpected input here.")
  defrule int$ = (?x:#int!) : x

  defproduction non-neg-int! : Int
  defrule non-neg-int! = (?x:#non-neg-int) : x
  fail-if non-neg-int! = () : RTME(closest-info(), "Non negative Int expected here.")

  defproduction non-neg-double! : Double
  defrule non-neg-double! = (?x:#non-neg-double) : x
  fail-if non-neg-double! = () : RTME(closest-info(), "Non negative Double expected here.")

  defproduction non-neg-int$ : Int
  fail-if non-neg-int$ = (?x:#non-neg-int! ?rest) : RTME(closest-info(rest), "Unexpected input here.")
  defrule non-neg-int$ = (?x:#non-neg-int!) : x

  defproduction non-neg-double$ : Double
  fail-if non-neg-double$ = (?x:#non-neg-double! ?rest) : RTME(closest-info(rest), "Unexpected input here.")
  defrule non-neg-double$ = (?x:#non-neg-double!) : x

  defproduction LE : False
  fail-if LE = (_) : RTME(closest-info(), "Unexpected input here.")
  defrule LE = () : false

  defproduction LS
  fail-if LS = ((! (_ ...))) : RTME(closest-info(), "Expected a list here.")
  defrule LS = () : false

  defproduction =>! : Symbol
  defrule =>! = (=>) : `=>
  fail-if =>! = () : RTME(closest-info(), "The => operator is expected here.")

  defproduction :! : Symbol
  defrule :! = (:) : (`:)
  fail-if :! = () : RTME(closest-info(), "A colon is expected here.")

  defproduction at! : Symbol
  defrule at! = (at) : `at
  fail-if at! = () : RTME(closest-info(), "The at keyword is expected here.")

  defproduction relative-to! : Symbol
  defrule relative-to! = (relative-to) : `relative-to
  fail-if relative-to! = () : RTME(closest-info(), "The relative-to keyword is expected here.")

  defproduction on! : Symbol
  defrule on! = (on) : `on
  fail-if on! = () : RTME(closest-info(), "The on keyword is expected here.")

  defproduction option! : Symbol
  defrule option! = (option) : `option
  fail-if option! = () : RTME(closest-info(), "The option keyword is expected here.")

  defproduction supported-by! : Symbol
  defrule supported-by! = (supported-by) : `supported-by
  fail-if supported-by! = () : RTME(closest-info(), "The supported-by keyword is expected here.")

  defproduction through! : Symbol
  defrule through! = (through) : `through
  fail-if through! = () : RTME(closest-info(), "The through keyword is expected here.")

  defproduction from! : Symbol
  defrule from! = (from) : `from
  fail-if from! = () : RTME(closest-info(), "The from keyword is expected here.")

  defproduction =! : Symbol
  defrule =! = (=) : `=
  fail-if =! = () : RTME(closest-info(), "The = operator is expected here.")

  defproduction point! : Point
  defrule point! = (?x:#point) : x
  fail-if point! = () : RTME(closest-info(), "Point expected here.")

  defproduction shape! : Shape
  defrule shape! = (?x:#shape) : x
  fail-if shape! = () : RTME(closest-info(), "Shape expected here.")

  defproduction pose! : Pose
  defrule pose! = (?x:#pose) : x
  fail-if pose! = () : RTME(closest-info(), "Pose expected here.")

  defproduction pin! : Pin
  defrule pin! = (?x:#pin) : x
  fail-if pin! = () : RTME(closest-info(), "Pin expected here.")

  defproduction rpin! : RPin
  defrule rpin! = (?x:#rpin) : x
  fail-if rpin! = () : RTME(closest-info(), "Pin expected here.")

  defproduction pintype! : PinType
  defrule pintype! = (?x:#pintype) : x
  fail-if pintype! = () : RTME(closest-info(), "Pin type expected here.")

  defproduction capabilitytype! : CapabilityType
  defrule capabilitytype! = (?x:#capabilitytype) : x
  fail-if capabilitytype! = () : RTME(closest-info(), "Capability type expected here.")

  defproduction componenttype! : ComponentType
  defrule componenttype! = (?x:#componenttype) : x
  fail-if componenttype! = () : RTME(closest-info(), "Component type expected here.")

  defproduction mstmt! : MStmt
  defrule mstmt! = (?x:#mstmt) : x
  fail-if mstmt! = () : RTME(closest-info(), "Module statement expected here.")


  defproduction cstmt! : CStmt
  defrule cstmt! = (?x:#cstmt) : x
  fail-if cstmt! = () : RTME(closest-info(), "Component statement expected here.")

  defproduction ref! : Ref
  defrule ref! = (?x:#ref) : x
  fail-if ref! = () : RTME(closest-info(), "Reference expected here.")

  defproduction ref$ : Ref
  fail-if ref$ = (#ref ?rest) : RTME(closest-info(rest), "Unexpected input here.")
  defrule ref$ = (?x:#ref!) : x


  public defproduction tstmt! : TStmt
  defrule tstmt! = (?x:#tstmt) : x
  fail-if tstmt! = () : RTME(closest-info(), "Top level statement expected here.")

  ;===== Identifiers =====
  defproduction id : Symbol
  defrule id != (.)
  defrule id != (=)
  defrule id != (:)
  defrule id != (=>)
  defrule id != (@do)
  defrule id != (@of)
  defrule id != (@tuple)
  defrule id != (@get)
  defrule id != (@afn)
  defrule id != (@do-afn)
  defrule id != (@cap)
  defrule id != (@quote)
  defrule id = (?x:#symbol) : x

  ;===== Top Level Statements =====
  public defproduction tstmt : TStmt

  ;===== References =====
  defproduction ref : Ref
  defrule ref = (?name:#id) : Ref(name)
  defrule ref = (?r:#ref . ?name:#id!) : FieldRef(r,name)
  defrule ref = (?r:#ref[?i:#non-neg-int$]) : IndexRef(r, i)

  defproduction refpair! : [Ref,Ref]
  defrule refpair! = ((?x:#ref! ?y:#ref!)) : [x, y]
  fail-if refpair! = () : RTME(closest-info(), "Pair of references expected here.")

  ;===== Bundles =====
  defrule tstmt = (pcb-bundle ?name:#id! #:! (?pins:#pin! ...)) :
    DefBundle(name, pins)

  defproduction pin : Pin
  defrule pin = (pin ?name:#id!) : Pin(name, SinglePin())
  defrule pin = (port ?name:#id! #:! ?type:#pintype!) : Pin(name, type)

  defproduction rpin : RPin
  defrule rpin = (pin ?ref:#ref!) : RPin(ref, SinglePin())
  defrule rpin = (port ?ref:#ref! #:! ?type:#pintype!) : RPin(ref, type)

  defproduction pintype : PinType
  defrule pintype = (?t:#pintype-helper) : inside-out(t)
  defproduction pintype-helper : PinType
  defrule pintype-helper = (pin) : SinglePin()
  defrule pintype-helper = (?t:#pintype-helper[?size:#non-neg-int$]) : PinArray(t, size)
  defrule pintype-helper = (?name:#id!) : PinBundle(name)

  ;===== Capabilities =====
  defrule tstmt = (pcb-capability ?name:#id! : ?t:#pintype!) : DefCapability(name, t)
  defrule tstmt = (pcb-capability ?name:#id!) : DefCapability(name, false)

  defproduction capabilitytype : CapabilityType
  defrule capabilitytype = (?t:#capabilitytype-helper) : inside-out(t)
  defproduction capabilitytype-helper : CapabilityType
  defrule capabilitytype-helper = (?c:#capabilitytype-helper[?size:#non-neg-int$]) : CapabilityArray(c, size)
  defrule capabilitytype-helper = (?name:#id!) : Capability(name)

  ;===== Component Type =====
  defproduction componenttype : ComponentType
  defrule componenttype = (?t:#componenttype-helper) : inside-out(t)
  defproduction componenttype-helper : ComponentType
  defrule componenttype-helper = (?c:#componenttype-helper[?size:#non-neg-int$]) : ComponentArray(c, size)
  defrule componenttype-helper = (?name:#id!) : SingleComponent(name)

  ;===== Components =====
  defrule tstmt = (pcb-component ?name:#id! #:! (
                     ?pins:#pin ...
                     ?stmts:#cstmt! ...)) :
    DefComponent(name, pins, stmts)

  public defproduction cstmt : CStmt
  defrule cstmt = (ground(?rs:#ref! ...)) : GroundStmt(rs)
  defrule cstmt = (power(?rs:#ref! ...) #:! (?props:#power-props!)) :
    PowerStmt(property(props, `voltage), property(props, `current), rs)
  defrule cstmt = (diffpairs(?ps:#refpair! ...) : (?props:#diffpair-props!)) :
    DiffPairStmt(property?(props, `line-type),
                 property?(props, `impedance),
                 property?(props, `skew),
                 property?(props, `max-loss),
                 property?(props, `spacing),
                 ps)
  defrule cstmt = (diffpairs(?ps:#refpair! ...)) :
    DiffPairStmt(false, false, false, false, false, ps)
  defrule cstmt = (package #=! ?p:#id! ?m:#mapping?) :
    DefaultPackageStmt(p, m)
  defrule cstmt = (emodel #=! ?m:#emodel!) :
    DefaultEModelStmt(m)
  defrule cstmt = (part #=! ?p:#id!) :
    DefaultPartStmt(p)
  defrule cstmt = (?s:#supports-stmt) :
    s
  defrule cstmt = (reference-prefix #=! ?s:#string!) :
    ReferencePrefixStmt(s)
  defrule cstmt = (max-current-draw(?rs:#ref! ...) #=! ?c:#double!) :
    MaxCurrentDrawStmt(rs, c)
  defrule cstmt = (estate(?r:#ref$) #=! [?ss:#estate! ...]) :
    EStateStmt(r, to-tuple(ss))
  defrule cstmt = (?s:#pinprop-stmt) :
    s

  ;Different cases for support options:
  ;Single-option supports with explicit identifier
  ;
  ;    supports i2c (i2c-1) :
  ;      i2c.a => p[0]
  ;      properties(p[0]) : ...
  ;
  ;Single-option supports without explicit identifier
  ;
  ;    supports i2c : 
  ;      i2c.a => p[0]
  ;      properties(p[0]) : ...
  ;
  ;Multi-option supports with explicit identifiers
  ;
  ;    supports i2c :
  ;      option (i2c-1) :
  ;        i2c.a => p[0]
  ;        properties(p[0]) : ...
  ;      option (i2c-2) :
  ;        i2c.b => p[1]
  ;        properties(p[1]) : ...
  ;
  ;Multi-option supports without explicit identifiers
  ;
  ;    supports i2c :
  ;      option :
  ;        i2c.a => p[0]
  ;        properties(p[0]) : ...
  ;      option :
  ;        i2c.b => p[1]
  ;        properties(p[1]) : ...

  ;Parses a support-option (when they have option keywords)
  defproduction support-option : SupportOption
  defrule support-option = (option ?id:#option-id #:! (?props:#support-props!)) :
    SupportOption(id,
                  properties(props, `require),
                  properties(props, `properties),
                  Mapping(properties(props, `mapping)))

  defproduction support-option! : SupportOption
  defrule support-option! = (?s:#support-option) : s
  fail-if support-option! = () : RTME(closest-info(), "Invalid syntax for support option.")

  ;Parses an implicit (no option keyword) support-option
  defproduction implicit-support-option  : SupportOption
  defrule implicit-support-option = (?id:#option-id : (?props:#support-props!)) :
    SupportOption(id,
                  properties(props, `require),
                  properties(props, `properties),
                  Mapping(properties(props, `mapping)))
  defrule implicit-support-option = (?id:#option-id) :
    SupportOption(id, List(), List(), NoMapping())

  ;Parses an optional
  defproduction option-id : Ref|False
  defrule option-id = ((?r:#ref$)) : r
  defrule option-id = () : false

  ;Parse a support statement
  defproduction supports-stmt : SupportsStmt
  defrule supports-stmt = (supports ?c:#id! : ((! (! option)) ?os:#support-option! ...)) :
    SupportsStmt(c, os)
  defrule supports-stmt = (supports ?c:#id! ?o:#implicit-support-option) :
    SupportsStmt(c, List(o))

  defproduction support-props! : PropertyList
  defrule support-props! = (?props:#support-prop! ...) :
    RTMPList{closest-info(), _, props} $ [
      Property(`require, true, false)
      Property(`properties, true, false)
      Property(`mapping, true, false)]
  defproduction support-prop! : KeyValue<Symbol,?>
  defrule support-prop! = (?s:#require-stmt) : `require => s
  defrule support-prop! = (?s:#pinprop-stmt) : `properties => s
  defrule support-prop! = (?x:#ref! #=>! ?y:#ref!) : `mapping => x => y

  defproduction power-props! : PropertyList
  defrule power-props! = (?props:#power-prop! ...) :
    RTMPList{closest-info(), _ props} $ [
      Property(`voltage, false, true)
      Property(`current, false, true)]
  defproduction power-prop! : KeyValue<Symbol,?>
  defrule power-prop! = (voltage #=! ?v:#double!) : `voltage => v
  defrule power-prop! = (current #=! ?c:#double!) : `current => c
  fail-if power-prop! = (?k:#id =) : RTME(closest-info(), "Unrecognized power property: '%_'." % [k])
  fail-if power-prop! = () : RTME(closest-info(), "Invalid syntax for power property.")

  defproduction diffpair-props! : PropertyList
  defrule diffpair-props! = (?props:#diffpair-prop! ...) :
    RTMPList{closest-info(), _ props} $ [
      Property(`line-type, true, true)
      Property(`impedance, true, true)
      Property(`skew, true, true)
      Property(`max-loss, true, true)
      Property(`spacing, true, true)]
  defproduction diffpair-prop! : KeyValue<Symbol,?>
  defrule diffpair-prop! = (line-type #=! ?t:#line-type!) : `line-type => t
  defrule diffpair-prop! = (impedance #=! ?v:#double!) : `impedance => v
  defrule diffpair-prop! = (skew #=! ?v:#double!) : `skew => v
  defrule diffpair-prop! = (max-loss #=! ?v:#double!) : `max-loss => v
  defrule diffpair-prop! = (spacing #=! ?v:#non-neg-double!) : `spacing => v
  fail-if diffpair-prop! = (?k:#id =) : RTME(closest-info(), "Unrecognized diffpair property: '%_'." % [k])
  fail-if diffpair-prop! = () : RTME(closest-info(), "Invalid syntax for diffpair property.")

  defproduction line-type! : LineType
  defrule line-type! = (Microstrip) : Microstrip
  defrule line-type! = (Stripline) : Stripline
  fail-if line-type! = (?x:#id!) : RTME(closest-info(), "Unrecognized line type: '%_'." % [x])


  ;===== Package Definitions =====
  defrule tstmt = (pcb-package ?name:#id! #:! (
                     ?paddefs:#paddef ...
                     ?pads:#pad ...
                   )) :
    DefPackage(
      name,
      pads,
      paddefs,
    )

  defproduction pad : Pad
  defrule pad = (pad ?ref:#ref! #:! ?type:#id! #at! ?loc:#pose! ?s:#side?) :
    val s* = Top when s is False else s as Side
    Pad(ref, type, loc, s*)


  defproduction paddef : DefPad
  defrule paddef = (pcb-pad ?name:#id! #:! (?props:#paddef-props!)) :
    DefPad(name,
           property(props, `shape),
           property(props, `type),
           )

  defproduction paddef-props! : PropertyList
  defrule paddef-props! = (?props:#paddef-prop! ...) :
    RTMPList{closest-info(), _ props} $ [
      Property(`type, false, true)
      Property(`shape, false, true)
    ]
  defproduction paddef-prop! : KeyValue<Symbol,?>
  defrule paddef-prop! = (type #=! ?t:#pad-type!) : `type => t
  defrule paddef-prop! = (shape #=! ?s:#shape!) : `shape => s
  fail-if paddef-prop! = (?k:#id =) : RTME(closest-info(), "Unrecognized pad property: '%_'." % [k])
  fail-if paddef-prop! = () : RTME(closest-info(), "Invalid syntax for pad property.")


  defproduction bottom? : True|False
  defrule bottom? = (bottom) : true
  defrule bottom? = () : false


  defproduction pad-type! : PadType
  defrule pad-type! = (SMD) : SMD
  defrule pad-type! = (TH) : TH
  fail-if pad-type! = (?x:#id!) : RTME(closest-info(), "Unrecognized pad type: '%_'." % [x])





  ;===== Parts =====
  defrule tstmt = (pcb-part ?name:#id! #:! (?props:#part-props!)) :
    DefPart(name,
            property(props, `manufacturer),
            property(props, `mpn),
            property(props, `package),
            property?(props, `component),
            property?(props, `emodel))

  defproduction part-props! : PropertyList
  defrule part-props! = (?props:#part-prop! ...) :
    RTMPList{closest-info(), _, props} $ [
      Property(`manufacturer, false, true)
      Property(`mpn, false, true)
      Property(`package, false, true)
      Property(`component, true, true)
      Property(`emodel, true, true)]
  defproduction part-prop! : KeyValue<Symbol,?>
  defrule part-prop! = (manufacturer #=! ?v:#string!) : `manufacturer => v
  defrule part-prop! = (mpn #=! ?v:#string!) : `mpn => v
  defrule part-prop! = (package #=! ?p:#id!) : `package => p
  defrule part-prop! = (component #=! ?c:#id!) : `component => c
  defrule part-prop! = (emodel #=! ?m:#emodel!) : `emodel => m
  fail-if part-prop! = (?k:#id =) : RTME(closest-info(), "Unrecognized part property: '%_'." % [k])
  fail-if part-prop! = () : RTME(closest-info(), "Invalid syntax for part property.")


  ;===== Attach =====
  defrule tstmt = (pcb-attach ?name:#id! (?args:#id! ...) #:! (?pins:#rpin ... ?ss:#mstmt! ...)) :
    DefAttach(name, args, pins, ss)

  ;===== Module =====
  defrule tstmt = (pcb-module ?name:#id! #:! (?pins:#pin ... ?ss:#mstmt! ...)) :
    DefModule(name, pins, ss)

  public defproduction mstmt : MStmt
  defrule mstmt = (inst ?name:#id! ?s:#supports-stmt) :
    InstSupportsStmt(Ref(name), s)  
  defrule mstmt = (inst ?name:#id! #:! ?type:#componenttype!) :
    InstStmt(name, type)
  defrule mstmt = (?s:#supports-stmt) :
    s
  defrule mstmt = (?s:#require-stmt) :
    s
  defrule mstmt = (node ?name:#id! #:! ?type:#pintype!) :
    NodeStmt(name, type)
  defrule mstmt = (net - (?rs:#ref! ...)) :
    NetStmt(false, rs)
  defrule mstmt = (net ?name:#id! (?rs:#ref! ...)) :
    NetStmt(name, rs)
  fail-if mstmt = (net ?name:#id!) :
    RTME(closest-info(), "Expected a list of references for net statement.")
  defrule mstmt = (package(?s:#selector!) ?nm:#name+mapping? ?p:#pose? ?side:#side? ?a:#relative?) :
    val [ref, instance?] = s
    PackageStmt(ref, instance?, nm, p, side, a)
  defrule mstmt = (emodel(?r:#ref$) #=! ?m:#emodel!) :
    EModelStmt(r, m)
  defrule mstmt = (part(?r:#ref$) #=! ?p:#id!) :
    PartStmt(r, p)
  defrule mstmt = (reference-designator(?r:#ref$) = ?value:#string!) :
    ReferenceStmt(r, value)
  defrule mstmt = (schematic-group(?r:#ref, ?unit:#non-neg-int, #LE) = ?g:#id!) :
    SchematicGroupStmt(r, unit, g)
  defrule mstmt = (schematic-group(?r:#ref$) = ?g:#id!) :
    SchematicGroupStmt(r, false, g)
  defrule mstmt = (max-current-draw(?rs:#ref! ...) #=! ?c:#double!) :
    MaxCurrentDrawStmt(rs, c)
  defrule mstmt = (estate(?r:#ref$) #=! [?ss:#estate! ...]) :
    EStateStmt(r, to-tuple(ss))
  defrule mstmt = (attach ?a:#id! (?rs:#ref! ...)) :
    AttachStmt(a, rs)
  defrule mstmt = (?s:#pinprop-stmt) :
    s
  defrule mstmt = (connect (?rs:#ref-or-refs! ...)) :
    ConnectionStmt(to-tuple(rs))
  defrule mstmt = (?s:#supported-by-stmt) :
    s

  defproduction supported-by-stmt : SupportedByStmt
  defrule supported-by-stmt = (required ?port?:#port-or-capability! ?ref:#ref! #supported-by! ?id:#ref! ?ss:#supported-by-stmts) :
    SupportedByStmt(ref, port?, id, ss)

  defproduction supported-by-stmt! : SupportedByStmt
  defrule supported-by-stmt! = (?s:#supported-by-stmt) : s
  fail-if supported-by-stmt! = () : RTME(closest-info(), "Expected a supported-by statement here.")

  defproduction supported-by-stmts : Tuple<SupportedByStmt>
  defrule supported-by-stmts = (where #:! (?ss:#supported-by-stmt! ...)) : to-tuple(ss)
  defrule supported-by-stmts = () : []

  defproduction port-or-capability! : True|False
  defrule port-or-capability! = (port) : true
  defrule port-or-capability! = (capability) : false
  fail-if port-or-capability! = () : RTME(closest-info(), "Expected either the port or capability keyword here.")

  defproduction ref-or-refs! : Ref|Tuple<Ref>
  defrule ref-or-refs! = ([?rs:#ref! ...]) : to-tuple(rs)
  defrule ref-or-refs! = (?r:#ref!) : r

  defproduction pinprop-stmt : PinPropertiesStmt
  defrule pinprop-stmt = (properties(?r:#ref$) ?l:#level? #:! (?props:#kvprop! ...)) :
    PinPropertiesStmt(r, l, to-tuple(props))

  defproduction level? : Int
  defrule level? = ((level #=! ?l:#int$)) : l
  defrule level? = () : 0

  defproduction kvprop! : KeyValue<Symbol,?>
  defrule kvprop! = (?k:#symbol! #=>! ?v:#kvvalue) : k => v
  fail-if kvprop! = () : RTME(closest-info(), "Expected a key value property here.")

  ;<doc>===================================
  ;=========== Literal Values =============
  ;========================================
  The reading and printing of literal values:
  All supported value types:
    - True
    - False
    - Char
    - Byte
    - Int
    - Long
    - Float
    - Double
    - String    
    - Symbol
    - List
    - Tuple
    - Ref
    
  Overarching invariant: ESIR should be able to be copied-and-pasted
  into the generator system and ran.

  Self-evaluating primitives, Char,Byte,Int,Long,Float,Double,String,
  can be written out using Stanza's formatted write utility. Symbols
  must be quoted. Lists are written out using the #L(...) generator
  syntax. Tuples are written out using [...] syntax. Refs are written
  using the #R(...) generator syntax.
  ;========================================
  ;===================================<doc>

  defproduction kvvalue
  defrule kvvalue = (?x) when unwrap-token(x) is True|False|Char|Byte|Int|Long|Float|Double|String : unwrap-token(x)
  defrule kvvalue = ((@quote ?x)) : unwrap-all(x)
  defrule kvvalue = ([?xs:#kvvalue! ...]) : to-tuple(xs)
  defrule kvvalue = (~ #L(?xs:#kvvalue! ...)) : xs
  defrule kvvalue = (~ #R(?r:#ref$)) : r

  defproduction kvvalue!
  defrule kvvalue! = (?x:#kvvalue) : x
  fail-if kvvalue! = () : RTME(closest-info(), "Invalid property value.")

  defproduction require-stmt : RequireStmt
  defrule require-stmt = (require ?name:#id : ?c:#capabilitytype! #from! ?inst:#ref! ?m:#req-mapping?) :
    RequireStmt(name, c, inst, m)
  defrule require-stmt = (require ?c:#capabilitytype! #from! ?inst:#ref! ?m:#req-mapping?) :
    RequireStmt(false, c, inst, m)

  defproduction req-mapping? : Mapping
  defrule req-mapping? = (with #:! #LS ((?xs:#ref! #=>! ?ys:#ref!) @...)) : Mapping(map(KeyValue, xs, ys))
  defrule req-mapping? = () : NoMapping()

  defproduction relative? : Ref|False
  defrule relative? = ((relative-to ?r:#ref$)) : r
  defrule relative? = () : false

  defproduction rail-props! : PropertyList
  defrule rail-props! = (?props:#rail-prop! ...) :
    RTMPList{closest-info(), _, props} $ [
      Property(`voltage-min, false, true)
      Property(`voltage-max, false, true)
      Property(`current-min, false, true)
      Property(`current-max, false, true)]
  defproduction rail-prop! : KeyValue<Symbol,?>
  defrule rail-prop! = (voltage-min #=! ?v:#double!) : `voltage-min => v
  defrule rail-prop! = (voltage-max #=! ?v:#double!) : `voltage-max => v
  defrule rail-prop! = (current-min #=! ?v:#double!) : `current-min => v
  defrule rail-prop! = (current-max #=! ?v:#double!) : `current-max => v
  fail-if rail-prop! = (?k:#id =) : RTME(closest-info(), "Unrecognized rail proeprty: '%_'." % [k])
  fail-if rail-prop! = () : RTME(closest-info(), "Invalid syntax for rail property.")

  defproduction plane-props! : PropertyList
  defrule plane-props! = (?props:#plane-prop! ...) :
    RTMPList{closest-info(), _, props} $ [
      Property(`isolate, false, true)
      Property(`rank, true, true)
      Property(`orphans, true, true)]
  defproduction plane-prop! : KeyValue<Symbol,?>
  defrule plane-prop! = (isolate #=! ?v:#double!) : `isolate => v
  defrule plane-prop! = (rank #=! ?v:#non-neg-int!) : `rank => v
  defrule plane-prop! = (orphans #=! ?v:#bool!) : `orphans => v
  fail-if plane-prop! = (?k:#id =) : RTME(closest-info(), "Unrecognized plane property: '%_'." % [k])
  fail-if plane-prop! = () : RTME(closest-info(), "Invalid syntax for plane property.")

  defproduction pose? : Pose|False
  defrule pose? = (at ?p:#pose!) : p
  defrule pose? = () : false
  defproduction mapping? : Mapping
  defrule mapping? = ((@do (?xs:#ref! #=>! ?ys:#ref!) @...)) : Mapping(map(KeyValue, xs, ys))
  defrule mapping? = () : NoMapping()
  defproduction side? : Side|False
  defrule side? = (on ?s:#side!) : s
  defrule side? = () : false
  defproduction name+mapping? : [Symbol, Mapping]|False
  defrule name+mapping? = (= ?n:#id! ?m:#mapping?) : [n, m]
  defrule name+mapping? = () : false
  defproduction selector! : [Ref True|False]
  defrule selector! = (insts-of ?r:#ref$) : [r, false]
  defrule selector! = (?r:#ref$) : [r, true]




  ;===== MakeSchematic =====
  defrule tstmt = (make-schematic(?module:#id$)) :
    MakeSchematic(module)

  ;===== EModels =====
  defproduction emodel! : EModel
  defrule emodel! = (Resistor(?r:#opt-double!, ?t:#opt-double!, ?p:#opt-double!)) :
    Resistor(r, t, p)
  defrule emodel! = (Capacitor(?c:#opt-double!, ?t:#opt-double!, ?v:#opt-double!,
                               ?p:#opt-bool!, ?esr:#opt-bool!, ?tc:#opt-sym!, ?di:#opt-sym!)) :
    Capacitor(c, t, v, p, esr, tc, di)
  defrule emodel! = (Inductor(?i:#opt-double!, ?t:#opt-double!, ?c:#opt-double!)) :
    Inductor(i, t, c)
  defrule emodel! = (Diode(?fc:#opt-double!, ?fv:#opt-double!, ?c:#opt-double!,
                           ?rv:#opt-double!, ?col:#opt-color!, ?l:#opt-double!)) :
    Diode(fc, fv, c, rv, col, l)
  fail-if emodel! = () :
    RTME(closest-info(), "Electrical model expected here.")

  defproduction opt-double! : Double|False
  defrule opt-double! = (?v:#double) : v
  defrule opt-double! = (false) : false
  fail-if opt-double! = (_) : RTME(closest-info(), "Expected either a double or false here.")
  defrule opt-double! = () : false

  defproduction opt-bool! : True|False|None
  defrule opt-bool! = (?v:#bool) : v
  defrule opt-bool! = (None()) : None()
  fail-if opt-bool! = (_) : RTME(closest-info(), "Expected either true or false or None() here.")
  defrule opt-bool! = () : None()

  defproduction opt-sym! : Symbol|False
  defrule opt-sym! = ((@quote ?v:#symbol)) : v
  defrule opt-sym! = (false) : false
  fail-if opt-sym! = (_) : RTME(closest-info(), "Expected either a symbol or false here.")
  defrule opt-sym! = () : false

  defproduction opt-color! : ColorSpec|False
  defrule opt-color! = (?v:#color) : v
  defrule opt-color! = (false) : false
  fail-if opt-color! = (_) : RTME(closest-info(), "Expected either a color specifier or false here.")
  defrule opt-color! = () : false

  defproduction color : ColorSpec
  defrule color = (NamedColor((@quote ?v:#symbol!) #LE)) : NamedColor(v)

  ;===== Points =====
  defproduction point : Point
  defrule point = (point(?x:#double!, ?y:#double!)) : Point(x,y)
  fail-if point = (point(_ ...)) : RTME(closest-info(), "Point expression expects two double arguments.")

  ;===== Shapes =====
  defproduction shape : Shape
  defrule shape = (?p:#point) : p
  defrule shape = (polygon(?p0:#point!, ?p1:#point!, ?p2:#point!, ?ps:#point! ...)) : Polygon(cons(p0, p1, p2, ps))
  defrule shape = (circle(?x:#double!, ?y:#double!, ?r:#non-neg-double!)) : Circle(Point(x,y),r)
  fail-if shape = (circle(_ ...)) : RTME(closest-info(), "Circle expression expects three double arguments.")
  defrule shape = (rectangle(?w:#non-neg-double!, ?h:#non-neg-double!, ?p:#pose!)) : Rectangle(w, h, p)
  fail-if shape = (rectangle(_ ...)) : RTME(closest-info(), "Rectangle expression expects two doubles and a pose argument.")
  defrule shape = (line(?w:#non-neg-double!, ?p0:#point! ?p1:#point! ?ps:#point! ...)) : Line(w, cons(p0, p1, ps))
  defrule shape = (union(?s0:#shape! ?ss:#shape! ...)) : Union(cons(s0,ss))
  defrule shape = (subtraction(?a:#shape!, ?b:#shape!, #LE)) : Subtraction(a, b)
  defrule shape = (text(?s:#string!, ?f:#id!, ?sz:#non-neg-double!, ?a:#anchor!, ?p:#pose!)) : Text(s,f,sz,a,p)
  fail-if shape = (text(_ ...)) : RTME(closest-info(), "Text expression expects a string, a font name, a size, an anchor, and a pose.")

  ;===== Orientation =====
  defproduction pose : Pose
  defrule pose = (loc(?x:#double!, ?y:#double!, ?angle:#double, FlipX)) : loc(Point(x,y),angle,true)
  defrule pose = (loc(?x:#double!, ?y:#double!, ?angle:#double)) : loc(Point(x,y),angle,false)
  defrule pose = (loc(?x:#double!, ?y:#double!)) : loc(Point(x,y),0.0,false)
  fail-if pose = (loc(_ ...)) : RTME(closest-info(), "Pose expression expects an x and y coordinate, an optional angle, and an optional flip argument.")

  ;===== Side =====
  defproduction side! : Side
  defrule side! = (Top) : Top
  defrule side! = (Bottom) : Bottom
  fail-if side! = (?x:#id!) : RTME(closest-info(), "Unrecognized side specifier: '%_'." % [x])

  ;===== Dir =====
  defproduction dir! : Dir
  defrule dir! = (Up) : Up
  defrule dir! = (Down) : Down
  defrule dir! = (Left) : Left
  defrule dir! = (Right) : Right
  fail-if dir! = (?x:#id!) : RTME(closest-info(), "Unrecognized direction specifier: '%_'." % [x])

  ;===== Anchors =====
  defproduction anchor! : Anchor
  defrule anchor! = (N) : N
  defrule anchor! = (E) : E
  defrule anchor! = (S) : S
  defrule anchor! = (W) : W
  defrule anchor! = (NE) : NE
  defrule anchor! = (SE) : SE
  defrule anchor! = (SW) : SW
  defrule anchor! = (NW) : NW
  defrule anchor! = (C) : C
  fail-if anchor! = (?x:#id!) : RTME(closest-info(), "Unrecognized anchor specifier: '%_'." % [x])

  ;===== Poses =====
  defproduction point-loc! : Point
  defrule point-loc! = (loc(?x:#double!, ?y:#double$)) : Point(x,y)
  fail-if point-loc! = () : RTME(closest-info(), "Location expected here.")

  ;===== Electrical State =====
  defproduction estate! : EState
  defrule estate! = (drives(?v:#double$)) : Driver(v)
  defrule estate! = (highz(?min:#double!, ?max:#double$)) : HighZ(min,max)
  fail-if estate! = () : RTME(closest-info(), "Electrical state expected here.")

;============================================================
;====================== Errors ==============================
;============================================================

public defn RTME (info: False|FileInfo, msg) :
  RTMReaderException(info, to-string(msg))

defn RTMPList (info:False|FileInfo, ps:Collection<Property>, vs:List<KeyValue<Symbol,?>>, complete?:True|False) :
  try : PropertyList(ps, vs, complete?)
  catch (e:MissingProperty) :
    throw(RTME(info, "Missing %_ specifier." % [name(e)]))
  catch (e:DuplicateProperty) :
    throw(RTME(info, "Duplicate %_ specifier." % [name(e)]))
  catch (e:UnknownProperty) :
    throw(RTME(info, "Unsupported specifier: '%_'." % [name(e)]))

defn RTMPList (info:False|FileInfo, ps:Collection<Property>, vs:List<KeyValue<Symbol,?>>) :
  RTMPList(info, ps, vs, true)
