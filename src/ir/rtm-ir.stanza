defpackage rtm/ir :
  import core
  import collections
  import math
  import rtm/utils
  import rtm/ir-printer
  import rtm/ir-serializer

;============================================================
;===================== Preconditions ========================
;============================================================

defn non-negative! (description:String, v:Int) :
  if v < 0 : fatal("The value (%_) given to %_ cannot be negative." % [v, description])
defn non-negative! (description:String, v:Double) :
  if v < 0.0 : fatal("The value (%_) given to %_ cannot be negative." % [v, description])
defn non-negative! (description:String, v:False) :
  false
defn smaller-than! (name:String, value:Double) :
  fn (description:String, v:Double) :
    if v >= value :
      fatal("The value (%_) given to %_ must be smaller than %_ (%_)." % [v, description, name, value])
defn not-equal! (value:Equalable) :
  fn (description:String, v:Equalable) :
    if v == value :
      fatal("%_ is not a valid value for %_." % [v, description])

defn and!<T> (a:(String, T) -> False, b:(String, T) -> False) :
  fn (d:String, v:T) :
    a(d, v)
    b(d, v)
defn and! (a:(String, Double) -> False, b:(String, Double) -> False) : and!<Double>(a, b)

defn min-length! (n0:Int) :
  fn (description:String, xs:List) :
    let loop (xs:List = xs, n:Int = n0) :
      if n > 0 :
        if empty?(xs) : fatal("The list given to %_ must have a minimum length of %_." % [description, n0])
        else : loop(tail(xs), n - 1)

defn non-empty! (description:String, v:Tuple) :
  fatal("The tuple given to %_ is empty." % [description]) when empty?(v)

defn non-empty-options! (description:String, os:List<SupportOption>) :
  if empty?(os) :
    fatal("The list of options for %_ must be non-empty." % [description])


defn supported-values! (description:String, entries:Tuple<KeyValue<Symbol,?>>) :
  defn supported? (v) :
    match(v) :
      (v:True|False|Char|Byte|Int|Long|Float|Double|String|Symbol|Ref) : true
      (v:Tuple) : all?(supported?,v)
      (v:List) : all?(supported?,v)
      (v) : false
  for e in entries do :
    if not supported?(value(e)) :
      fatal("In %_, value %_ given to property %_ is not a supported value." % [description, value(e), key(e)])

;============================================================
;==================== IR Specification ======================
;============================================================

;===== Types =====
;=================
public deftype TStmt

;===== References =====
;======================
public deftype Ref <: Hashable & Equalable & Comparable<Ref>
public defstruct VarRef <: Ref :
  name: Symbol
public defstruct FieldRef <: Ref :
  ref: Ref
  name: Symbol
public defstruct IndexRef <: Ref :
  ref: Ref
  index: Int with: (ensure => non-negative!)

;===== Bundles =====
;===================
public defstruct DefBundle <: TStmt :
  name: Symbol
  pins: List<Pin>

public defstruct Pin :
  name: Symbol with: (updater => sub-name)
  type: PinType with: (updater => sub-type)

public deftype PinType <: Equalable
public defstruct SinglePin <: PinType
public defstruct PinArray <: PinType :
  type: PinType
  length: Int with: (ensure => non-negative!)

public defstruct PinBundle <: PinType :
  name: Symbol with: (ensure => not-equal!(`pin))

;===== Capabilities =====
;========================
public defstruct DefCapability <: TStmt :
  name: Symbol
  type: PinType|False

;===== Parts =====
public defstruct DefPart <: TStmt :
  name: Symbol
  manufacturer: String
  mpn: String
  package: Symbol
  component: Symbol|False with: (default => false)
  emodel: EModel|False with: (default => false, updater => sub-emodel)

;===== Components =====
;======================
public defstruct DefComponent <: TStmt :
  name: Symbol with: (updater => sub-name)
  pins: List<Pin> with: (updater => sub-pins)
  stmts: List<CStmt> with: (updater => sub-stmts)

public deftype CStmt
public defstruct GroundStmt <: CStmt :
  refs: List<Ref>
public defstruct PowerStmt <: CStmt :
  voltage: Double
  current: Double
  refs: List<Ref>
public defstruct DiffPairStmt <: CStmt :
  line-type: LineType|False
  impedance: Double|False
  skew: Double|False
  max-loss: Double|False
  spacing: Double|False with: (ensure => non-negative!)
  pairs: List<[Ref Ref]>
public defstruct DefaultPackageStmt <: CStmt :
  package: Symbol with: (updater => sub-package)
  mapping: Mapping with: (updater => sub-mapping)
public defstruct DefaultEModelStmt <: CStmt :
  model: EModel
public defstruct DefaultPartStmt <: CStmt :
  part: Symbol
public defstruct SupportsStmt <: CStmt&MStmt :
  capability: Symbol with: (updater => sub-capability)
  options: List<SupportOption> with: (updater => sub-options, ensure => non-empty-options!)
public defstruct ReferencePrefixStmt <: CStmt :
  prefix: String
public defstruct MaxCurrentDrawStmt <: CStmt&MStmt :
  refs: List<Ref> with: (updater => sub-refs)
  current: Double
public defstruct EStateStmt <: CStmt&MStmt :
  ref: Ref with: (updater => sub-ref)
  states: Tuple<EState>
public defstruct PinPropertiesStmt <: CStmt&MStmt :
  ref: Ref with: (updater => sub-ref)
  level: Int with: (updater => sub-level)
  entries: Tuple<KeyValue<Symbol,?>> with: (ensure => supported-values!)

public deftype LineType
public deftype Microstrip <: LineType
public deftype Stripline <: LineType
public val Microstrip = new Microstrip
public val Stripline = new Stripline

;===== Symbols =====
;===================

public deftype Dir <: Equalable&Hashable
public deftype Up <: Dir
public deftype Down <: Dir
public deftype Left <: Dir
public deftype Right <: Dir
public val Up = new Up
public val Down = new Down
public val Left = new Left
public val Right = new Right

;===== Packages =====
;====================
public defstruct DefPackage <: TStmt :
  name: Symbol with: (updater => sub-name)
  pads: List<Pad> with: (updater => sub-pads)
  pad-defs: List<DefPad> with: (updater => sub-pad-defs)
  external-names: List<String> with: (default => List(), updater => sub-external-names)


public defstruct Pad :
  ref: Ref
  pad: Symbol
  pose: Pose
  side: Side with: (default => Top)

;===== Pads =====
;================
public defstruct DefPad :
  name: Symbol with: (updater => sub-name)
  shape: Shape with: (updater => sub-shape)
  type: PadType with: (updater => sub-type)

public deftype PadType
public deftype SMD <: PadType
public deftype TH <: PadType
public val SMD = new SMD
public val TH = new TH


;===== Attachments =====
;=======================
public defstruct DefAttach <: TStmt :
  name: Symbol with: (updater => sub-name)
  args: List<Symbol> with: (updater => sub-args)
  pins: List<RPin> with: (updater => sub-pins)
  stmts: List<MStmt> with: (updater => sub-stmts)

public defstruct RPin :
  ref: Ref with: (updater => sub-ref)
  type: PinType with: (updater => sub-type)

;===== Modules =====
;===================
public defstruct DefModule <: TStmt :
  name: Symbol with: (updater => sub-name)
  pins: List<Pin> with: (updater => sub-pins)
  stmts: List<MStmt> with: (updater => sub-stmts)

public deftype MStmt
public defstruct NodeStmt <: MStmt :
  name: Symbol with: (updater => sub-name)
  type: PinType with: (updater => sub-type)
public defstruct NetStmt <: MStmt :
  name: Symbol|False with: (updater => sub-name)
  refs: List<Ref> with: (updater => sub-refs)
public defstruct InstStmt <: MStmt :
  name: Symbol with: (updater => sub-name)
  type: ComponentType with: (updater => sub-type)
public defstruct RequireStmt <: MStmt :
  name: Symbol|False with: (updater => sub-name)
  capability: CapabilityType
  inst: Ref with: (updater => sub-inst)
  mapping: Mapping with: (updater => sub-mapping)  
public defstruct InstSupportsStmt <: MStmt :
  inst: Ref with: (updater => sub-inst)
  capability: Symbol with: (updater => sub-capability)
  options: List<SupportOption> with: (updater => sub-options, ensure => non-empty-options!)  
public defstruct PackageStmt <: MStmt :
  ref: Ref with: (updater => sub-ref)
  instance?: True|False with: (updater => sub-instance?)
  package: [Symbol, Mapping]|False with: (updater => sub-package)
  pose: Pose|False with: (updater => sub-pose)
  side: Side|False with: (updater => sub-side)
  anchor: Ref|False with: (updater => sub-anchor)
public defstruct EModelStmt <: MStmt :
  ref: Ref with: (updater => sub-ref)
  model: EModel with: (updater => sub-model)
public defstruct PartStmt <: MStmt :
  ref: Ref with: (updater => sub-ref)
  part: Symbol with: (updater => sub-part)
public defstruct ReferenceStmt <: MStmt :
  ref: Ref with: (updater => sub-ref)
  value: String with: (updater => sub-value)
public defstruct SchematicGroupStmt <: MStmt :
  ref: Ref with: (updater => sub-ref)
  unit: Int|False with: (default => false, updater => sub-unit, ensure => non-negative!)
  group: Symbol with: (updater => sub-group)
public defstruct AttachStmt <: MStmt :
  attach:Symbol with: (updater => sub-attach)
  args:List<Ref> with: (updater => sub-args)  
public defstruct ConnectionStmt <: MStmt :
  args: Tuple<Ref|Tuple<Ref>> with: (updater => sub-args)
public defstruct SupportedByStmt <: MStmt :
  ref:Ref with: (updater => sub-ref)
  port?:True|False
  option-id:Ref with: (updater => sub-option-id)  
  nested-supports:Tuple<SupportedByStmt> with: (updater => sub-nested-supports)

public defstruct SupportOption :
  id: Ref|False with: (updater => sub-id)
  requires: List<RequireStmt> with: (updater => sub-requires)
  properties: List<PinPropertiesStmt> with: (updater => sub-properties)
  mapping: Mapping with: (updater => sub-mapping)
<<<<<<< HEAD
with:
  printer => true
=======
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa

public defstruct Mapping :
  mappings: List<KeyValue<Ref, Ref>>
public defn NoMapping () :
  Mapping(List())
public defn empty? (m:Mapping) :
  empty?(mappings(m))

public deftype Side <: Equalable&Hashable
public deftype Top <: Side
public deftype Bottom <: Side
public val Top = new Top
public val Bottom = new Bottom


;===== Electrical Models =====
public deftype EModel <: Hashable&Equalable
public defstruct Resistor <: EModel :
  ;Nominal resistance in Ohms
  resistance: Double|False with: (default => false)
  ;Resistance tolerance in percent
  tolerance: Double|False with: (default => false)
  ;Maximum power in Watts
  max-power: Double|False with: (default => false)
public defstruct Capacitor <: EModel :
  ;Nominal capacitance in MicroFarads
  capacitance: Double|False with: (default => false)
  ;Capacitance tolerance in percent
  tolerance: Double|False with: (default => false)
  ;Maximum working voltage in Volts
  max-voltage: Double|False with: (default => false)
  ;True if capacitor is polarized
  polarized?: True|False|None with: (default => None())
  ;True if capacitor is low-ESR
  low-esr?: True|False|None with: (default => None())
  ;Temperature coefficient designator (`X7R, `X5R)
  temperature-coefficient: Symbol|False with: (default => false)
  ;Dielectric Designator (`Ceramic, `Tantalum, `Electrolytic)
  dielectric: Symbol|False with: (default => false)
public defstruct Inductor <: EModel :
  ;Nominal inductance in Microhenries
  inductance: Double|False with: (default => false)
  ;Inductance tolerance in percent
  tolerance: Double|False with: (default => false)
  ;Maximum working current in amps
  max-current: Double|False with: (default => false)
public defstruct Diode <: EModel :
  ;Forward test current in Amps
  forward-current: Double|False with: (default => false)
  ;Forward test voltage drop in Volts
  forward-voltage: Double|False with: (default => false)
  ;Maximum continuous forward current in Amps
  max-current: Double|False with: (default => false)
  ;Maximum continuous reverse voltage in Volts
  max-reverse-voltage: Double|False with: (default => false)
  ;Color specifier
  color: ColorSpec|False with: (default => false)
  ;Luminous intensity at max current in Millicandelas. Should be false, if color is false.
  luminous-intensity: Double|False with: (default => false)

public deftype ColorSpec <: Hashable&Equalable
public defstruct NamedColor <: ColorSpec :
  name: Symbol  

;===== Requirements =====
;========================
public deftype CapabilityType
public defstruct Capability <: CapabilityType :
  name: Symbol
public defstruct CapabilityArray <: CapabilityType :
  capability: CapabilityType
  length: Int with: (ensure => non-negative!)

;===== Instance Types =====
;==========================
public deftype ComponentType
public defstruct SingleComponent <: ComponentType :
  name: Symbol
public defstruct ComponentArray <: ComponentType :
  type: ComponentType
  length: Int with: (ensure => non-negative!)

;===== Make Commands =====
;=========================

public defstruct MakeSchematic <: TStmt :
  module: Symbol

;===== Shapes =====
;==================

public deftype Shape
public defstruct Point <: Shape & Equalable & Hashable :
  x: Double with: (updater => sub-x)
  y: Double with: (updater => sub-y)
public defstruct Polygon <: Shape :
  points: List<Point> with: (ensure => min-length!(3))
with:
  constructor => #Polygon
public defstruct Circle <: Shape :
  center: Point
  radius: Double with: (ensure => non-negative!)
public defstruct Rectangle <: Shape :
  width: Double with: (ensure => non-negative!)
  height: Double with: (ensure => non-negative!)
  pose: Pose
public defstruct Line <: Shape :
  width: Double with: (ensure => non-negative!)
  points: List<Point> with: (ensure => min-length!(2))
with:
  constructor => #Line
public defstruct Union <: Shape :
  shapes: List<Shape>
with:
  constructor => #Union
public defstruct Subtraction <: Shape :
  a: Shape
  b: Shape
public defstruct Text <: Shape :
  string: String with: (updater => sub-string)
  font: Symbol with: (updater => sub-font)
  size: Double with: (ensure => non-negative!, updater => sub-size)
  anchor: Anchor with: (updater => sub-anchor)
  pose: Pose with: (updater => sub-pose)

public deftype Anchor <: Equalable
public deftype N <: Anchor
public deftype S <: Anchor
public deftype E <: Anchor
public deftype W <: Anchor
public deftype NE <: Anchor
public deftype SE <: Anchor
public deftype SW <: Anchor
public deftype NW <: Anchor
public deftype C <: Anchor
public val N = new N
public val S = new S
public val E = new E
public val W = new W
public val NE = new NE
public val SE = new SE
public val SW = new SW
public val NW = new NW
public val C = new C

public defstruct Pose <: Equalable & Hashable :
  center: Point with: (updater => sub-center)
  angle: Double with: (updater => sub-angle)
  flip-x?: True|False with: (updater => sub-flip-x?)
with :
  constructor => #Pose

;===== Electrical States =====
;=============================

public deftype EState
public defstruct Driver <: EState :
  voltage: Double
public defstruct HighZ <: EState :
  min-voltage: Double
  max-voltage: Double
  
;============================================================
;====================== Utilities ===========================
;============================================================
public defn name! (s:NetStmt) :
  name(s) as Symbol

public defn InstSupportsStmt (r:Ref, s:SupportsStmt) :
  InstSupportsStmt(r, capability(s), options(s))

public defn supports-stmt (s:InstSupportsStmt) :
  SupportsStmt(capability(s), options(s))

defn flatten-shapes (ss:Seqable<Shape|Seqable>) :
  generate<Shape> :
    let loop (s:Shape|Seqable = ss) :
      match(s:Seqable) : do(loop, s)
      else : yield(s as Shape)

public defn Polygon (pts:Seqable<Point|Seqable>) :
  val pts* = to-list(flatten-shapes(pts))
  ensure-points(pts*, "polygon")
  #Polygon(pts* as List<Point>)

public defn Line (width:Double, pts:Seqable<Shape|Seqable>) :
  val pts* = to-list(flatten-shapes(pts))
  ensure-points(pts*, "line")
  #Line(width, pts* as List<Point>)

public defn Union (ss:Seqable<Shape|Seqable>) :
  val ss* = generate<Shape> :
    let loop (s:Shape|Seqable = ss) :
      match(s) :
        (s:Union) : do(yield, shapes(s))
        (s:Shape) : yield(s)
        (s:Seqable) : do(loop, s)
  if empty?(ss*) :
    fatal("Cannot form union from no shapes.")
  else :
    val s0 = next(ss*)
    if empty?(ss*) : s0
    else : #Union(cons(s0, to-list(ss*)))

defn ensure-points (xs:List<Shape>, name:String) :
  #if-defined(OPTIMIZE) :
    false
  #else :
    for x in xs do :
      if x is-not Point :
        fatal("A %_ must be provided a list of points. Given %_." % [name, x])

public defn get (p:Point, i:Int) -> Double :
   if i < 0 or i > 1 : fatal("Index (%_) out of bounds." % [i])
   x(p) when i == 0 else y(p)

public defn Ref (x) : VarRef(to-symbol(x))


defmethod hash (r:VarRef) : hash(name(r))
defmethod hash (r:FieldRef) : 7 * hash(ref(r)) + hash(name(r))
defmethod hash (r:IndexRef) : 11 * hash(ref(r)) + index(r)
defmethod equal? (a:VarRef, b:VarRef) : name(a) == name(b)
defmethod equal? (a:FieldRef, b:FieldRef) : ref(a) == ref(b) and name(a) == name(b)
defmethod equal? (a:IndexRef, b:IndexRef) : ref(a) == ref(b) and index(a) == index(b)
public defn name! (r:Ref) : name(r as VarRef)

defmethod equal? (a:Anchor, b:Anchor) :
  match(a, b) :
    (a:N, b:N) : true
    (a:S, b:S) : true
    (a:E, b:E) : true
    (a:W, b:W) : true
    (a:NE, b:NE) : true
    (a:SE, b:SE) : true
    (a:SW, b:SW) : true
    (a:NW, b:NW) : true
    (a:C, b:C) : true
    (a, b) : false

defmethod equal? (a:PinType, b:PinType) :
  match(a, b) :
    (a:SinglePin, b:SinglePin) : true
    (a:PinArray, b:PinArray) : type(a) == type(b) and length(a) == length(b)
    (a:PinBundle, b:PinBundle) : name(a) == name(b)
    (a, b) : false

defmethod equal? (a:Point, b:Point) :
  x(a) == x(b) and
  y(a) == y(b)

defmethod hash (a:Point) :
  hash([x(a), y(a)])

defmethod equal? (a:Pose, b:Pose) :
  center(a) == center(b) and
  angle(a) == angle(b) and
  flip-x?(a) == flip-x?(b)

defmethod hash (a:Pose) :
  hash([center(a), angle(a), flip-x?(a)])

defmethod equal? (a:Side, b:Side) :
  match(a, b) :
    (a:Top, b:Top) : true
    (a:Bottom, b:Bottom) : true
    (a, b) : false

defmethod equal? (a:Dir, b:Dir) :
  match(a, b) :
    (a:Up, b:Up) : true
    (a:Down, b:Down) : true
    (a:Left, b:Left) : true
    (a:Right, b:Right) : true
    (a, b) : false

defmethod hash (a:Dir) :
  match(a) :
    (a:Up) : 0
    (a:Down) : 1
    (a:Left) : 2
    (a:Right) : 3

defmethod hash (a:Side) :
  match(a) :
    (a:Top) : 0
    (a:Bottom) : 1

defn params (m:EModel) :
  defn remove-none (x:True|False|None) -> Hashable :
    match(x:None) : `none
    else : x as True|False
  match(m) :
    (m:Resistor) : [`resistor, resistance(m), tolerance(m), max-power(m)]
    (m:Capacitor) : [`capacitor, capacitance(m), tolerance(m), max-voltage(m),
                     remove-none(polarized?(m)), remove-none(low-esr?(m)),
                     temperature-coefficient(m), dielectric(m)]
    (m:Inductor) : [`inductor, inductance(m), tolerance(m), max-current(m)]
    (m:Diode) : [`diode, forward-current(m), forward-voltage(m), max-current(m),
                 max-reverse-voltage(m), color(m), luminous-intensity(m)]

defmethod hash (m:EModel) :
  hash(params(m))

defmethod hash (c:NamedColor) :
  hash(name(c))

defmethod equal? (a:EModel, b:EModel) :
  params(a) == params(b)

defmethod equal? (a:NamedColor, b:NamedColor) :
  name(a) == name(b)

defmethod compare (a:Ref, b:Ref) :
<<<<<<< HEAD
  match(a:VarRef, b:VarRef) :
    compare(name(a), name(b))
  else :
    defn ref? (r:Ref) :
      match(r:FieldRef|IndexRef) : ref(r)
      else : r
    defn rank (r:Ref) :
      match(r) :
        (r:VarRef) : 0
        (r:IndexRef) : 1      
        (r:FieldRef) : 2
    val c = compare(ref?(a), ref?(b))
    if c == 0 :
      match(a, b) :
        (a:FieldRef, b:FieldRef) : compare(name(a), name(b))
        (a:IndexRef, b:IndexRef) : compare(index(a), index(b))
        (a, b) : compare(rank(a), rank(b))
    else : c
=======
  defn rank (a:Ref) :
    match(a) :
      (a:VarRef) : 0
      (a:FieldRef) : 1
      (a:IndexRef) : 2
      
  match(a, b) :
    (a:VarRef, b:VarRef) :
      compare(name(a), name(b))
    (a:FieldRef, b:FieldRef) :
      val c = compare(ref(a), ref(b))
      if c == 0 : compare(name(a), name(b))
      else : c
    (a:IndexRef, b:IndexRef) :
      val c = compare(ref(a), ref(b))
      if c == 0 : compare(index(a), index(b))
      else : c
    (a, b) :
      compare(rank(a), rank(b))
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa

public defn component (s:InstStmt) :
  name(type(s) as SingleComponent)

public defn InstStmt (name:Symbol, component:Symbol) :
  InstStmt(name, SingleComponent(component))

