defpackage passes :
  import core
  import collections
  import rtm/ir
  import pass-manager
  import param-manager
  import jitpcb/task-graph
  import jitpcb/config
  import rtm/ir-lower
  import rtm/ir-utils
  import jitpcb/errors
  import rtm/pin-solver
  import rtm/structures
  import rtm/errors
  import rtm/ir-connections
  import system-topology

;============================================================
;===================== Dependencies =========================
;============================================================

;Thru Passes
add-paths $ `(input
              check
              prune
              lower
              expand
              prune-lower
             )

;End Passes
add-path(`check, `elkt)
add-path(`prune-lower, `key-in)

;============================================================
;====================== Check ===============================
;============================================================

add-pass $ new ThruPass :
  defmethod name (this) : `check
  defmethod output? (this) : false
  defmethod run (this, dir:String, proj-name:String, input:Collection<TStmt>, params:Params) :
    call-plugin-entry-point(`check, `check, [input, false])
    input

;============================================================
;=================== System Topology ========================
;============================================================

<<<<<<< HEAD
register-parameter-set(`elkt, [
  `average-character-width => IntParam()
  `character-height => IntParam()
  `padding => IntParam()])

add-pass $ new EndPass :
  defmethod name (this) : `elkt
  defmethod run (this, dir:String, proj-name:String, input:Collection<TStmt>, params:Params) :
    val hints = ELKSizingHints(
                  params[`elkt, `average-character-width]
                  params[`elkt, `character-height]
                  params[`elkt, `padding])
    val output-name = string-join([dir, proj-name, ".elkt"])
    export-system-topology-to-elkt(input, output-name, hints)
=======
add-pass $ new EndPass :
  defmethod name (this) : `elkt
  defmethod run (this, dir:String, proj-name:String, input:Collection<TStmt>, params:Params) :
    val output-name = string-join([dir, proj-name, ".elkt"])
    export-system-topology-to-elkt(input, output-name)
>>>>>>> 91ead84f5ccab218fdb43062b3a1776d4f20afaa

;============================================================
;==================== Lower =================================
;============================================================

register-parameter-set(`lower, [
  `post-power-generation => OptionalParam(BoolParam())])

add-pass $ new ThruPass :
  defmethod name (this) : `lower
  defmethod run (this, dir:String, proj-name:String, input:Collection<TStmt>, params:Params) :
    lower(to-list(input), KicadFlattener())

;<doc>=======================================================
;===================== Expansion ============================
;============================================================

Order of Operations:
  - Compute the first satisfying pin assignment.
  - Using that pin assignment, expand the connections.
  - End if there were any errors during expansion.
  - If no connections have been expanded, then we're done expansion,
    go to output.
  - Otherwise if connections have been expanded, then:
    - check the expansion
    - lower it again
    - and go back to the beginning.
  - Before output, compute the concrete pins.  

;============================================================
;=======================================================<doc>  

defn iteratively-expand-connections (solve-pins:Collection<TStmt> -> Collection<TStmt>,
                                     dir:String,
                                     proj-name:String,
                                     input:Collection<TStmt>) -> Collection<TStmt> :
  if has-connections?(input) :
    let loop (input:Collection<TStmt> = input, iteration:Int = 0) :
      ;Dump to file
      defn dump (prog:Collection<TStmt>, stage:String) :
        val filename = norm-path("%_%_.%_.iter%_.esir" % [dir, proj-name, stage, iteration])
        spit(filename, "%n" % [prog])
        
      ;Solving Pins
      val solved = solve-pins(input)
      dump(solved, "assigned-pins")

      ;Expanding Connections
      val [expanded, progress?] = plugins/slave/call-driver(`expand-connections, solved)
      dump(expanded, "expanded")

      ;If progress has been made, then check, lower, and try again
      if progress? :
        ;Check the expansion for any errors
        remove-errors({true})
        call-plugin-entry-point(`check, `check, [expanded, true])
        
        ;Lower the expansion again
        val lowered = lower(expanded)
        dump(lowered, "lower")
        
        ;Try again
        loop(lowered, iteration + 1)
      ;Otherwise, finish up by substituting concrete pins and exit
      else :
        substitute-concrete-pins(expanded)
  else :
    val solved = solve-pins(input)
    substitute-concrete-pins(solved)

add-pass $ new ThruPass :
  defmethod name (this) : `expand  
  defmethod run (this, dir:String, proj-name:String, input:Collection<TStmt>, params:Params) :
    defn solve-pins (prog:Collection<TStmt>) :
      assign-satisfying-pins(prog)
    iteratively-expand-connections(solve-pins, dir, proj-name, input)


;============================================================
;==================== Solve Requirements ====================
;============================================================
;
;add-pass $ new ThruPass :
;  defmethod name (this) : `solve-requirements
;  defmethod run (this, dir:String, proj-name:String, input:Collection<TStmt>, params:Params) :
;    assign-satisfying-pins(input)


;============================================================
;========================= Prune ============================
;============================================================
register-parameter-set(`prune, [
  `prune-for => OptionalParam(SymbolParam())
  `prune-all => OptionalParam(ListParam(SymbolParam()))])

for name in [`prune, `prune-lower] do :
  add-pass $ new ThruPass :
    defmethod name (this) : name
    defmethod optional? (this) : true
    defmethod run (this, dir:String, proj-name:String, input:Collection<TStmt>, params:Params) :
      val pruning-option =
        match(get?(params, `prune, `prune-for), get?(params, `prune, `prune-all)) :
          (f:One, a:One) : throw(PruneError(PRUNE-ERROR))
          (f:One<Symbol>, a:None) : PruneFor(value(f))
          (f:None, a:One<List<Symbol>>) : PruneAll(value(a))
          (f:None, a:None) : NoPrune()
      call-plugin-entry-point(`passes, `prune, [input, pruning-option])

val PRUNE-ERROR = "JitPCB prune config can take either the 'prune-for' or 'prune-all' parameters but not both."


;============================================================
;======================= Key In =============================
;============================================================

add-pass $ new EndPass :
  defmethod name (this) : `key-in
  defmethod run (this, dir:String, proj-name:String, input:Collection<TStmt>, params:Params) :
    call-plugin-entry-point(`keyin, `export, [input, dir, proj-name])

