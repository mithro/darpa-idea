defpackage jitpcb :
  import core
  import collections
  import plugins
  import plugins/master
  import stz/arg-parser
  import jitpcb/config
  import jitpcb/errors
  import pass-manager-io
  import jitpcb/core-interface
  import rtm/errors
  import rtm/utils

;============================================================
;================ Command-line Options ======================
;============================================================
val COMMANDS = Vector<Command>()
defn add-command (c:Command) : add(COMMANDS,c)

;============================================================
;====================== Version =============================
;============================================================

val ABOUT-MSG =
\<MSG>
             JitPCB Circuit Design Automation

                     Version %_

Copyright (c) 2019, JITX Inc. All Rights Reserved.
<MSG>

defn print-version (parsed:ParseResult) :
  val version = string-join(jitpcb-version(), ".")
  println(ABOUT-MSG % [version])

add-command $ Command("version", [], print-version)

;============================================================
;======================== Process ===========================
;============================================================

public defn process (parsed:ParseResult) :
  ;Single argument accepted
  throw(NoESIRFiles("process")) when empty?(args(parsed))
  throw(TooManyESIRFiles("process")) when length(args(parsed)) > 1
  val filename = head(args(parsed))

  ;Retrieve the seed
  val seed = long-arg?(parsed, "seed", current-time-us())
  ;Set the seed
  srand(seed)
  ;Output the seed
  match(single?(parsed, "seed-out", false)) :
    (file:String) : spit(file, seed)
    (str:False) : false

  ;Grab all list of symbol arguments
  defn symbol-args (name:String) :
    map(to-symbol, multiple?(parsed, name, List()))
  call-core-process(
    FileArg(filename),
    single?(parsed, "o", false),
    single?(parsed, "params", false),
    symbol-args("passes"),
    symbol-args("configs"))

  ;Grab warnings
  val er = error-report()
  throw(Warning(er)) when not empty?(er)

add-command $ Command("process", 
  [MultipleFlag("passes", false)
   MultipleFlag("configs", true)
   SingleFlag("seed", true)
   SingleFlag("seed-out", true)
   SingleFlag("o", true)
   SingleFlag("params", true)]
  process)

;============================================================
;====================== Compilation =========================
;============================================================

defn compile (parsed:ParseResult) :
  val verbose? = has-flag?(parsed, "verbose")
  call-core-plugin(`compile, [
    args(parsed),
    single?(parsed, "o", false),
    single?(parsed, "s", false),
    has-flag?(parsed, "optimize"),
    has-flag?(parsed, "pkg")
    verbose?]
    verbose?)

add-command $ Command("compile",
  [SingleFlag("o", true)
   SingleFlag("s", true)
   MarkerFlag("optimize")
   MarkerFlag("pkg")
   MarkerFlag("verbose")]
  compile)

;============================================================
;======================== Main Driver =======================
;============================================================

public defn main () :
  try :
    verify-config()
    val args = command-line-arguments()[1 to false]
    parse-args(COMMANDS, false, args)
  catch (e) :
    val error? = print-error-report(e)
    exit(-1) when error?

main()
