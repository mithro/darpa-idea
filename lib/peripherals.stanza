defpackage peripherals:
  import core
  import collections
  import input-spec/ir
  import rtm/ir
  import rtm/ir-gen
  import rtm/ir-utils
  import interfaces
  import components
  import modules
  import power-system-gen
  import powergen
  import modulegen

#use-added-syntax(ir-gen)

public defstruct GeneratedPeripheral :
  anchor-ref : Ref
  intf-map : Collection<KeyValue<Symbol, Collection<Ref>>>
with :
  constructor => #GeneratedPeripheral

public defn GeneratedPeripheral (anchor-ref:Ref) :
  GeneratedPeripheral(anchor-ref, List())

public defn GeneratedPeripheral (
  anchor-ref : Ref
  intf-map : Collection<KeyValue<Symbol, Ref|Collection<Ref>>>
) :
  val processed-map = to-tuple $ for kv in intf-map seq :
    match(value(kv)) :
      (r:Ref) : key(kv) => [r]
      (cr:Collection<Ref>) : key(kv) => cr
  #GeneratedPeripheral(anchor-ref, processed-map)

defn generate-mounting-hole (config:List<KeyValue<Symbol,?>>) :
  var radius = -1.0
  for e in config do :
    switch(key(e)) :
      `radius : radius = value(e) as Double
      `diameter : radius = (value(e) as Double) / 2.0
      else :
        fatal("Unrecognized key '%_' in mounting-hole spec.")
  
  if radius <= 0.0 :  
    fatal("Invalid radius %_." % [radius])

  inside pcb-module :
    inst m-hole : {mounting-hole-cmp(radius)}
    GeneratedPeripheral(m-hole)

defn generate-motor-driver (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    inst driver : motor-driver
    val intf-map = [
      `power-48v0 => driver.src-48v0
      `power-12v0 => driver.src-12v0
      `power-3v3 => driver.src-3v3
      `adc => [
        driver.current_fb_A
        driver.current_fb_B
        driver.current_fb_C
        driver.voltage_fb_A
        driver.voltage_fb_B
        driver.voltage_fb_C
      ]
      `dio => [
        driver.OTW_n
        driver.FAULT_n
      ]
      `pwm => [
        driver.PWM_A
        driver.PWM_B
        driver.PWM_C
        driver.RESET_A_n
        driver.RESET_B_n
        driver.RESET_C_n
      ]
    ]
    GeneratedPeripheral(driver, intf-map)

val IMU-COUNTER = to-seq(0 to false)

defn generate-imu-6dof (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    if peek(IMU-COUNTER) < 2 :
      inst imu : {imu-6dof(next(IMU-COUNTER))}
      within (rail) = make-load("IMU", 3.3, 0.0011, 3.3 * 0.03) :
        net pow-3v3 (pos(rail), imu.src-3v3.pos)
        net - (neg(rail), imu.src-3v3.neg)
      val intf-map = [
        `i2c => imu.host_i2c
      ]
      GeneratedPeripheral(imu, intf-map)
    else :
      fatal("Too many accelerometers requested.")

defn generate-magnetometer-AEAT-6600-T16 (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    inst magnetometer : AEAT-6600-T16
    within (rail) = make-load("Magnetometer", 3.3, 0.021, 3.3 * 0.03) :
      net pow-3v3 (pos(rail), magnetometer.src-3v3.pos)
      net - (neg(rail), magnetometer.src-3v3.neg)
    val intf-map = [
      `spi => magnetometer.host_spi
      ; TODO: these should be assigned to microcontroller pins with QEI hardware support
      `dio => [
        magnetometer.incrementalA-u
        magnetometer.incrementalB-v
      ]
    ]
    GeneratedPeripheral(magnetometer, intf-map)

defn generate-magnetometer-MLX90363 (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    inst magnetometer : MLX90363
    within (rail) = make-load("Magnetometer", 3.3, 0.018, 3.3 * 0.03) :
      net pow-3v3 (pos(rail), magnetometer.src-3v3.pos)
      net - (neg(rail), magnetometer.src-3v3.neg)
    val intf-map = [
      `spi => magnetometer.host_spi
    ]
    GeneratedPeripheral(magnetometer, intf-map)

defn generate-rs485 (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    inst interface : uart-to-rs485
    within (rail) = make-load("RS485", 3.3, 0.021, 3.3 * 0.03) :
      net pow-3v3 (pos(rail), interface.src-3v3.pos)
      net - (neg(rail), interface.src-3v3.neg)
    val intf-map = [
      ;`power-48v0 => interface.src-power
      `uart => interface.uart
      `dio => [
        interface.rec-en_n
        interface.driv-en
        interface.term-en
      ]
    ]
    GeneratedPeripheral(interface, intf-map)

val ACCEL-COUNTER = to-seq(0 to false)

defn generate-accelerometer (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    if peek(ACCEL-COUNTER) < 2 :
      inst acc : {accel(next(ACCEL-COUNTER))}
      add-peripheral-node("Accelerometer", 3.3, 170.0e-6, [`i2c])
      within (rail) = make-load("Accelerometer", 3.3, 170.0e-6, 3.3 * 0.03) :
        net pow-3v3 (pos(rail), acc.src-3v3.pos)
        net - (neg(rail), acc.src-3v3.neg)
      val intf-map = [
        `i2c => acc.i2c
      ]
      GeneratedPeripheral(acc, intf-map)
    else :
      fatal("Too many accelerometers requested.")

defn generate-pressure-sensor (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
      inst p-s : pressure-sensor
      within (rail) = make-load("Pressure Sensor", 3.3, 0.002, 3.3 * 0.03) :
        net pow-3v3 (pos(rail), p-s.src-3v3.pos)
        net - (neg(rail), p-s.src-3v3.neg)
      val intf-map = to-list([
        `i2c => to-list([p-s.i2c])
      ])
      GeneratedPeripheral(p-s, intf-map)

val MCP9808-COUNTER = to-seq(0 to false)

defn generate-temperature-sensor (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    var interface : Symbol|False = false

    for e in config do :
      switch(key(e)) :

        `interface :
          interface = switch(value(e)) :
            `i2c : `i2c
            `adc : `adc
            else : false
    if interface == false or interface == `i2c :
      if peek(MCP9808-COUNTER) < 2 :
        inst sensor : {MCP9808-temperature-sensor(next(MCP9808-COUNTER), 0, 0)}
        add-peripheral-node("Temperature-sensor (MCP9808)", 3.3, 2.0e-5, [`i2c])  
        within (rail) = make-load("Temperature sensor", 3.3, 0.002, 3.3 * 0.03) :
          net pow-3v3 (pos(rail), sensor.src-3v3.pos)
          net - (neg(rail), sensor.src-3v3.neg)
        val intf-map = [
          `i2c        => sensor.host_i2c
        ]
        GeneratedPeripheral(sensor, intf-map)
      else :
        fatal("Too many temperature sensors requested.")
    else if interface == `adc :
      inst t : MCP9700A-temperature-sensor
      add-peripheral-node("Temperature-sensor (MCP9700A)", 3.3, 15.0e-6, [`adc])  
      within (rail) = make-load("Temperature sensor", 3.301, 15.0e-6, 1.0e-4) :
        net an-3v3 (pos(rail), t.src-3v3.pos)
        net - (neg(rail), t.src-3v3.neg)
      val intf-map = to-list([
        `adc => to-list([t.adc])
      ])
      GeneratedPeripheral(t, intf-map)
    else :
        fatal("Invalid temperature sensor interface.")

defn generate-stepper-driver (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
      inst drv : stepper-driver
      val intf-map = to-list([
        `dio => to-list([drv.step])
        `dio => to-list([drv.dir])
        `dio => to-list([drv.enable])
      ])
      GeneratedPeripheral(drv, intf-map)

defn generate-microphone (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    inst bma : {bandpass-mic-amp(100.0, 1000.0, 1.0)}
    within (rail) = make-load("Microphone", 3.301, 15.0e-6, 0.05e-3) :
      net an-3v3 (pos(rail), bma.src-3v3.pos)
      net - (neg(rail), bma.src-3v3.neg)
    val intf-map = [
      `adc => bma.dst-sig
    ]
    GeneratedPeripheral(bma, intf-map)

defn generate-binary-led (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module:
    var res-side : Symbol|False = false
    var package : Symbol|False = false
    var drive-high? : True|False = false
    var io-type = `dio
    var color = `green

    for e in config do :
      switch(key(e)) :

        `res-side :
          res-side = switch(value(e)) :
            `top : `top
            `bottom : `bottom
            else : false
        
        `drive :
          drive-high? = value(e) == `high
        
        `package :
          package = switch(value(e)) :
            `right-angle : `right-angle
            `JST-PH : `JST-PH
            else : false
        
        `io : io-type = value(e) as Symbol

        `color : 
          color = switch(value(e)) :
            `green : `green
            `blue : `blue
            `red : `red
            `yellow : `yellow
            `white : `white
            `red-green : `red-green
            else : false
        else : false
    val [led, intf-map] = switch(color) :
      `red-green :
        inst led : red-green-led
        add-peripheral-node("LED (red-green)", 3.3, 50.0e-3, [`dio `dio])  
        [led, [
          `dio => led.dio[0]
          `dio => led.dio[1]
        ]]
      else :
        inst led : {binary-led(res-side, package, drive-high?)}
        add-peripheral-node("LED", 3.3, 50.0e-3, [`dio])  
        [led, [
          io-type => led.dio
        ]]

    within (rail) = make-load("LED", 3.3, 0.05, 100.0e-3) :
      net pow-3v3 (pos(rail), led.src-3v3.pos)
      net - (neg(rail), led.src-3v3.neg)

    GeneratedPeripheral(led, intf-map)

defn generate-vibration-switch (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module:
    inst sw : vibration-switch
    within (rail) = make-load("Vibration switch", 3.3, 0.005, 100.0e-3) :
      net pow-3v3 (pos(rail), sw.src-3v3.pos)
      net - (neg(rail), sw.src-3v3.neg)
    val intf-map = [
      `dio => sw.dio
    ]
    GeneratedPeripheral(sw, intf-map)

defn generate-eeprom (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module:
    inst eeprom : eeprom
    within (rail) = make-load("EEPROM", 3.3, 0.005, 3.3 * 0.03) :
      net pow-3v3 (pos(rail), eeprom.src-3v3.pos)
      net - (neg(rail), eeprom.src-3v3.neg)
    val intf-map = [
      `i2c => eeprom.i2c
      `dio => eeprom.wp
    ]
    GeneratedPeripheral(eeprom, intf-map)

defn generate-raspi (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module :
    inst rp : raspi-with-level-shifters
    within (rail) = make-load("RasPi3B+", 5.0, 1.5, 150.0e-3) :
      net pow-5v0 (pos(rail), rp.src-5v0.pos)
      net - (neg(rail), rp.src-5v0.neg)
    val intf-map = [
      `reset => rp.reset
      `i2c => rp.i2c
      `uart => rp.uart
    ]
    GeneratedPeripheral(rp, intf-map)

defn generate-rgb-led-array (config:List<KeyValue<Symbol,?>>) :
  var pos-list : List<List<Double>> = List()
  for e in config do :
    switch(key(e)) :
      `positions : pos-list = value(e) as List<List<Double>>
      else :
        fatal("Unrecognized key '%_' in rgb-led-array spec." % [key(e)])

  var poses = Vector<[Double, Double, Double]>()
  for p in pos-list do :
    if length(p) == 2 :
      add(poses, [p[0], p[1], 0.0])
    else if length(p) == 3 :
      add(poses, [p[0], p[1], p[2]])
    else :
      fatal("Invalid pose %_." % [p])
      
  inside pcb-module:
    inst rgb : {rgb-led-array(to-list(poses))}
    within (rail) = make-load("RGB-LED", 3.3, 0.5, 100.0e-3) :
      net pow-3v3 (pos(rail), rgb.src-3v3.pos)
      net - (neg(rail), rgb.src-3v3.neg)
    val intf-map = [
      `i2c => rgb.i2c
    ]
    GeneratedPeripheral(rgb, intf-map)

defn generate-rgb-led-pwm (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module:
    inst rgb : rhom-SMLP34RGB
    within (rail) = make-load("RGB-LED", 3.3, 0.1, 100.0e-3) :
      net pow-3v3 (pos(rail), rgb.src-3v3.pos)
      net - (neg(rail), rgb.src-3v3.neg)
    val intf-map = [
      `pwm => [rgb.r, rgb.g, rgb.b]
    ]
    GeneratedPeripheral(rgb, intf-map)

defn generate-rgb-led (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module:
    inst rgb : rhom-SMLP34RGB
    within (rail) = make-load("RGB-LED", 3.3, 0.1, 100.0e-3) :
      net pow-3v3 (pos(rail), rgb.src-3v3.pos)
      net - (neg(rail), rgb.src-3v3.neg)
    val intf-map = [
      `dio => [rgb.r, rgb.g, rgb.b]
    ]
    GeneratedPeripheral(rgb, intf-map)

defn generate-rgb-led-group (config:List<KeyValue<Symbol,?>>) :
  var pos-list : List<List<Double>> = List()
  var led-package : String = "PLCC4"
  var external-driver : True|False = false
  for e in config do :
    switch(key(e)) :
      `led-package : led-package = value(e) as String
      `external-driver : external-driver = value(e) as True|False
      `positions : pos-list = value(e) as List<List<Double>>
      else : fatal("Unrecognized key '%_' in rgb-led-group spec." % [key(e)])

  var poses = Vector<[Double, Double, Double]>()
  for p in pos-list do :
    if length(p) == 2 :
      add(poses, [p[0], p[1], 0.0])
    else if length(p) == 3 :
      add(poses, [p[0], p[1], p[2]])
    else :
      fatal("Invalid pose %_." % [p])
      
  inside pcb-module:
    inst rgb : {rgb-led-group(led-package, external-driver, to-list(poses))}
    within (rail) = make-load(3.3, 0.5, 100.0e-3) :
      net pow-3v3 (pos(rail), rgb.src-3v3.pos)
      net - (neg(rail), rgb.src-3v3.neg)
    val intf-map = [
      `pwm => [rgb.pwm[0], rgb.pwm[1], rgb.pwm[2]]
    ]
    GeneratedPeripheral(rgb, intf-map)

defn generate-button (config:List<KeyValue<Symbol,?>>) :
  var package = `omron-B3U-1000P
  var io-type = `dio

  for e in config do :
    switch(key(e)) :
      `package : package = value(e) as Symbol
      `io : io-type = value(e) as Symbol
      else : fatal("Unrecognized key '%_' in button spec." % [key(e)])

  inside pcb-module:
    inst but : {button(package)}
    add-peripheral-node("Button", 3.3, 5.0e-3, [`dio])  
    within (rail) = make-load("Button", 3.3, 0.005, 3.3 * 0.03) :
      net pow-3v3 (pos(rail), but.src-3v3.pos)
      net - (neg(rail), but.src-3v3.neg)
    val intf-map = [
      io-type => but.dio
    ]
    GeneratedPeripheral(but, intf-map)

defn generate-microSD (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module:
    inst uSD : microSD
    within (rail) = make-load("MicroSD Card", 3.3, 0.1, 3.3 * 0.03) :
      net pow-3v3 (pos(rail), uSD.src-3v3.pos)
      net - (neg(rail), uSD.src-3v3.neg)
    val intf-map = [
      `spi => uSD.spi
      `dio => uSD.det-sw
    ]
    GeneratedPeripheral(uSD, intf-map)

defn generate-tag-connect (config:List<KeyValue<Symbol,?>>) :
  inside pcb-module:
    inst tag : swd-tag-connect
    within (rail) = make-load("Tag Connect", 3.3, 0.005, 3.3 * 0.03) :
      net pow-3v3 (pos(rail), tag.src-3v3.pos)
      net - (neg(rail), tag.src-3v3.neg)
    val intf-map = [
      `swd => tag.swd
    ]
    GeneratedPeripheral(tag, intf-map)

; Design-specific

val PERIPHERAL-GENERATORS = HashTable<Symbol, ((List<KeyValue<Symbol,?>>) -> GeneratedPeripheral)>()

PERIPHERAL-GENERATORS[`temperature-sensor] = generate-temperature-sensor
PERIPHERAL-GENERATORS[`motor-driver] = generate-motor-driver
PERIPHERAL-GENERATORS[`imu-6dof] = generate-imu-6dof
PERIPHERAL-GENERATORS[`magnetometer] = generate-magnetometer-AEAT-6600-T16
PERIPHERAL-GENERATORS[`rs485] = generate-rs485
PERIPHERAL-GENERATORS[`accelerometer] = generate-accelerometer
PERIPHERAL-GENERATORS[`pressure-sensor] = generate-pressure-sensor
PERIPHERAL-GENERATORS[`stepper-driver] = generate-stepper-driver
PERIPHERAL-GENERATORS[`microphone] = generate-microphone
PERIPHERAL-GENERATORS[`binary-led] = generate-binary-led
PERIPHERAL-GENERATORS[`rgb-led-array] = generate-rgb-led-array
PERIPHERAL-GENERATORS[`rgb-led-group] = generate-rgb-led-group
PERIPHERAL-GENERATORS[`rgb-led] = generate-rgb-led-pwm
PERIPHERAL-GENERATORS[`button] = generate-button
PERIPHERAL-GENERATORS[`vibration-switch] = generate-vibration-switch
PERIPHERAL-GENERATORS[`microSD] = generate-microSD
PERIPHERAL-GENERATORS[`eeprom] = generate-eeprom
PERIPHERAL-GENERATORS[`raspi] = generate-raspi
PERIPHERAL-GENERATORS[`tag-connect] = generate-tag-connect
PERIPHERAL-GENERATORS[`mounting-hole] = generate-mounting-hole

public defn generate-peripheral (peripheral:Peripheral) :
  inside pcb-module :
    if key?(PERIPHERAL-GENERATORS, name(peripheral)) :
      val gen-per = PERIPHERAL-GENERATORS[name(peripheral)](config(peripheral))
      ;package(anchor-ref(gen-per)) at pose(peripheral) on side(peripheral)
      gen-per
    else :
      fatal("Unrecognized peripheral type %_" % [name(peripheral)])
